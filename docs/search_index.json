[["tuesday-january-31-2023.html", "Tuesday January 31, 2023 Filtering, selecting, and conditioning on attributes Filtering on geographic boundaries Joining data frames Interpolating using areal weights S4 spatial data objects", " Tuesday January 31, 2023 “An awful lot of time I spend”coding” is actually spent copying and pasting (And much of the rest is spent googling).” – Meghan Duffy Lab 1 answers are on GitHub Filtering, selecting, and conditioning on attributes Variables (stored as column vectors) in spatial data frames are called ‘attributes’. The simple feature column in a simple feature spatial data frame stores the spatial information as well-known text With simple feature data frames you can create data subsets using [, subset() and $ from the {base} R packages and select() and filter() from the {dplyr} package The [ operator subsets rows and columns. Indexes specify the elements you wish to extract from an object, e.g. object[i, j], with i and j typically being numbers representing rows and columns. Leaving i or j empty returns all rows or columns, so world[1:5, ] returns the first five rows and all columns of the simple feature data frame world (from the {spData} package) Examples: world &lt;- spData::world world[c(1, 5, 9), ] # subset rows by row position ## iso_a2 name_long continent region_un subregion ## 1 FJ Fiji Oceania Oceania Melanesia ## 5 US United States North America Americas Northern America ## 9 ID Indonesia Asia Asia South-Eastern Asia ## type area_km2 pop lifeExp gdpPercap ## 1 Sovereign country 19289.97 885806 69.96000 8222.254 ## 5 Country 9510743.74 318622525 78.84146 51921.985 ## 9 Sovereign country 1819251.33 255131116 68.85600 10003.089 ## geom ## 1 -180.00000, -179.91737, -179.79332, -180.00000, -180.00000, -16.55522, -16.50178, -16.02088, -16.06713, -16.55522, 178.12557, 177.67087, 177.28504, 177.38146, 177.93266, 178.55271, 178.71806, 178.37360, 178.12557, -17.50481, -17.38114, -17.72465, -18.16432, -18.28799, -18.15059, -17.62846, -17.33992, -17.50481, 179.99999, 179.99999, 179.41351, 179.09661, 178.59684, 178.72506, 179.36414, 179.99999, -16.55522, -16.06714, -16.37905, -16.43398, -16.63915, -17.01204, -16.80135, -16.55522 ## 5 -171.73166, -171.79111, -171.55306, -170.67139, -170.29056, -169.52944, -168.77194, -168.68944, -169.68251, -170.49111, -171.11443, -171.73166, 63.78252, 63.40585, 63.31779, 63.37582, 63.19444, 62.97693, 63.18860, 63.29751, 63.43112, 63.69498, 63.59219, 63.78252, -166.46779, -167.45528, -166.84834, -166.19277, -165.57916, -165.67443, -166.46779, 60.38417, 60.21307, 59.94141, 59.75444, 59.90999, 60.29361, 60.38417, -159.36569, -159.59620, -159.74877, -159.80051, -159.46372, -159.34512, -159.36569, 22.21494, 22.23618, 22.13820, 22.06533, 21.88299, 21.98200, 22.21494, -158.02520, -158.29265, -158.25380, -158.12667, -157.77860, -157.70703, -157.65283, -157.94161, -158.02520, 21.71696, 21.57912, 21.53919, 21.31244, 21.27729, 21.26442, 21.32217, 21.65272, 21.71696, -156.75824, -157.25027, -157.32521, -156.78933, -156.75824, 21.17684, 21.21958, 21.09777, 21.06873, 21.17684, -155.99566, -156.25711, -156.61258, -156.71055, -156.70167, -156.58673, -156.41445, -156.07926, -155.99566, 20.76404, 20.91745, 21.01249, 20.92676, 20.86430, 20.78300, 20.57241, 20.64397, 20.76404, -155.40214, -155.78505, -155.86108, -155.91907, -155.85008, -156.02368, -156.07347, -155.90806, -155.93665, -155.68817, -155.54211, -155.22217, -154.83147, -154.80741, -155.06226, -155.22452, -155.40214, 20.07975, 20.24870, 20.26721, 20.17395, 19.97729, 19.81422, 19.70294, 19.33888, 19.05939, 18.91619, 19.08348, 19.23972, 19.45328, 19.50871, 19.85910, 19.99302, 20.07975, -153.22873, -153.76278, -154.67099, -154.51640, -154.00509, -153.00631, -152.14115, -152.56479, -153.22873, 57.96897, 57.81657, 57.46120, 56.99275, 56.73468, 57.11584, 57.59106, 57.90143, 57.96897, -140.98599, -140.98599, -142.07251, -143.58945, -144.92001, -145.68999, -147.61336, -149.72000, -150.73999, -152.27000, -152.21001, -153.90001, -154.34417, -155.06779, -156.58082, -158.11972, -159.03918, -160.93480, -161.90890, -162.93057, -163.16861, -164.43081, -166.20471, -166.76444, -165.39029, -164.43099, -163.71972, -162.48971, -161.67777, -163.78860, -163.65251, -164.47471, -166.70527, -168.11056, -166.84500, -166.42529, -164.96083, -163.54639, -162.75779, -162.45305, -161.39193, -160.77778, -161.51807, -160.95834, -160.77251, -161.53445, -162.26056, -163.06722, -163.75333, -164.56251, -164.91918, -165.73445, -166.12138, -165.35083, -165.34639, -164.66222, -163.81834, -162.51806, -161.87417, -162.05499, -161.96889, -161.35500, -160.35527, -159.98129, -159.71167, -159.05861, -158.51722, -158.19473, -157.04167, -157.55027, -157.72277, -158.46110, -158.68444, -160.07056, -160.56360, -161.80417, -162.87000, -163.84834, -164.94223, -164.78557, -163.06945, -162.23777, -161.22305, -160.28972, -159.60333, -158.43332, -158.11722, -156.55610, -156.30833, -155.30749, -154.23249, -153.28751, -154.01917, -152.57833, -151.89584, -150.62111, -150.34694, -151.40972, -151.85943, -151.71639, -150.60824, -149.72786, -148.57082, -148.01807, -148.22431, -147.11437, -145.92556, -143.95888, -142.57444, -140.82527, -139.86779, -137.80001, -136.62806, -135.03821, -134.07806, -133.53918, -132.25001, -131.96721, -131.08582, -130.53611, -130.53611, -130.53611, -129.98000, -130.00778, -131.70781, -132.73042, -133.35556, -134.27111, -134.94500, -135.47583, -136.47972, -137.45250, -138.34089, -139.03900, -140.01300, -140.99778, -140.99250, -140.98600, -140.98599, 69.71200, 69.71200, 69.85194, 70.15251, 69.98999, 70.12001, 70.21403, 70.53001, 70.43002, 70.60001, 70.82999, 70.88999, 70.69641, 71.14778, 71.35776, 70.82472, 70.89164, 70.44769, 70.33333, 69.85806, 69.37111, 68.91554, 68.88303, 68.35888, 68.04277, 67.61634, 67.11639, 66.73557, 66.11612, 66.07721, 66.57666, 66.57666, 66.08832, 65.67000, 65.08890, 64.68667, 64.44695, 64.55916, 64.33861, 64.55944, 64.77724, 64.78860, 64.40279, 64.22280, 63.76611, 63.45582, 63.54194, 63.05946, 63.21945, 63.14638, 62.63308, 62.07500, 61.50002, 61.07390, 60.50750, 60.26748, 59.79806, 59.98972, 59.63362, 59.26693, 58.67166, 58.67084, 59.07112, 58.57255, 58.93139, 58.42419, 58.78778, 58.61580, 58.91888, 58.32833, 57.57000, 57.21692, 57.01668, 56.41806, 56.00805, 55.89499, 55.34804, 55.03943, 54.57222, 54.40417, 54.68974, 55.02419, 55.36473, 55.64358, 55.56669, 55.99415, 56.46361, 56.97998, 57.42277, 57.72779, 58.14637, 58.86473, 59.35028, 60.06166, 60.72720, 61.28442, 61.03359, 60.72580, 59.74498, 59.15582, 59.36821, 59.70566, 59.91417, 59.97833, 60.67299, 60.88466, 60.45861, 59.99918, 60.08445, 59.72752, 59.53776, 58.50000, 58.21221, 58.18771, 58.12307, 57.17889, 56.37000, 55.49778, 55.17891, 54.80275, 54.80275, 54.80278, 55.28500, 55.91583, 56.55212, 57.69289, 58.41028, 58.86111, 59.27056, 59.78778, 59.46389, 58.90500, 59.56211, 60.00000, 60.27682, 60.30639, 66.00003, 69.71200, 69.71200, -122.84000, -122.50000, -122.34000, -122.58736, -123.12000, -124.56610, -124.68721, -124.39567, -124.07963, -123.89893, -124.02053, -124.14214, -124.53284, -124.21370, -124.17886, -124.39807, -123.86517, -123.72720, -122.95319, -122.51201, -122.54747, -121.71457, -120.74433, -120.62286, -120.36778, -119.43884, -119.08100, -118.51989, -118.41060, -117.94400, -117.29594, -117.12776, -115.99135, -114.72139, -114.81500, -113.30498, -111.02361, -109.03500, -108.24194, -108.24000, -106.50759, -106.14290, -105.63159, -105.03737, -104.70575, -104.45697, -103.94000, -103.11000, -102.48000, -101.66240, -100.95760, -100.45584, -100.11000, -99.52000, -99.30000, -99.02000, -98.24000, -97.53000, -97.14000, -97.33000, -97.38000, -97.37000, -97.14000, -96.59404, -95.60026, -94.69000, -93.84842, -93.22637, -92.49906, -91.62678, -90.88022, -90.15463, -89.77928, -89.40823, -89.21767, -89.43000, -89.41373, -89.59383, -89.18049, -88.41782, -87.53036, -86.40000, -85.77310, -85.28784, -85.10882, -84.10000, -83.70959, -82.93000, -82.65000, -82.85526, -82.70515, -82.24000, -81.71000, -81.33000, -81.17213, -80.68000, -80.38103, -80.13156, -80.08801, -80.05654, -80.53000, -80.53558, -80.98000, -81.31371, -81.49042, -81.33629, -80.86498, -80.30132, -79.20357, -79.06067, -78.55435, -78.05496, -77.39763, -76.36318, -75.72749, -75.86804, -75.97180, -76.25874, -76.30162, -76.99000, -76.32933, -76.54272, -76.35000, -76.23287, -75.72205, -76.03127, -75.94023, -75.37747, -75.05673, -75.07183, -75.32000, -75.52805, -75.20002, -74.98041, -74.90604, -74.17838, -73.96244, -74.25671, -73.95232, -73.98200, -73.34500, -71.94500, -72.24126, -73.71000, -72.87643, -72.29500, -71.86000, -71.12039, -70.64000, -69.96503, -69.88497, -70.18500, -70.08000, -70.49500, -70.82500, -70.81489, -70.64548, -70.11617, -69.06000, -68.03252, -66.96466, -67.13741, -67.79134, -67.79046, -68.23444, -68.90500, -69.23722, -69.99997, -70.30500, -70.66000, -71.08482, -71.40500, -71.50506, -73.34783, -74.86700, -75.31821, -76.37500, -76.50000, -76.82003, -77.73789, -78.72028, -79.17167, -79.01000, -78.92000, -78.93936, -80.24745, -81.27775, -82.43928, -82.69009, -83.02981, -83.14200, -83.12000, -82.90000, -82.43000, -82.13764, -82.33776, -82.55092, -83.59285, -83.46955, -83.61613, -83.89077, -84.09185, -84.14212, -84.33670, -84.60490, -84.54375, -84.77924, -84.87608, -85.65236, -86.46199, -87.43979, -88.37811, -89.27292, -89.60000, -90.83000, -91.64000, -92.61000, -93.63087, -94.32914, -94.64000, -94.81758, -95.15609, -95.15907, -97.22872, -100.65000, -104.04826, -107.05000, -110.05000, -113.00000, -116.04818, -117.03121, -120.00000, -122.84000, 49.00000, 48.18000, 47.36000, 47.09600, 48.04000, 48.37971, 48.18443, 47.72017, 46.86475, 45.52341, 44.61589, 43.70838, 42.76599, 41.99964, 41.14202, 40.31320, 39.76699, 38.95166, 38.11371, 37.78339, 37.55176, 36.16153, 35.15686, 34.60855, 34.44711, 34.34848, 34.07800, 34.02778, 33.74091, 33.62124, 33.04622, 32.53534, 32.61239, 32.72083, 32.52528, 32.03914, 31.33472, 31.34194, 31.34222, 31.75485, 31.75452, 31.39995, 31.08383, 30.64402, 30.12173, 29.57196, 29.27000, 28.97000, 29.76000, 29.77930, 29.38071, 28.69612, 28.11000, 27.54000, 26.84000, 26.37000, 26.06000, 25.84000, 25.87000, 26.21000, 26.69000, 27.38000, 27.83000, 28.30748, 28.73863, 29.48000, 29.71363, 29.78375, 29.55230, 29.67700, 29.14854, 29.11743, 29.30714, 29.15961, 29.29108, 29.48864, 29.89419, 30.15999, 30.31598, 30.38490, 30.27433, 30.40000, 30.15261, 29.68612, 29.63615, 30.09000, 29.93656, 29.10000, 28.55000, 27.88624, 27.49504, 26.73000, 25.87000, 25.64000, 25.20126, 25.08000, 25.20616, 25.81678, 26.20576, 26.88000, 28.04000, 28.47213, 29.18000, 30.03552, 30.72999, 31.44049, 32.03330, 32.50936, 33.15839, 33.49395, 33.86133, 33.92547, 34.51201, 34.80854, 35.55074, 36.55125, 36.89726, 36.96640, 37.91794, 38.23999, 38.08326, 38.71762, 39.15000, 38.31921, 37.93705, 37.25660, 37.21689, 38.01551, 38.40412, 38.78203, 38.96000, 39.49850, 39.24845, 39.19640, 38.93954, 39.70926, 40.42763, 40.47351, 40.75075, 40.62800, 40.63000, 40.93000, 41.11948, 40.93110, 41.22065, 41.27000, 41.32000, 41.49445, 41.47500, 41.63717, 41.92283, 42.14500, 41.78000, 41.80500, 42.33500, 42.86530, 43.09024, 43.68405, 43.98000, 44.32520, 44.80970, 45.13753, 45.70281, 47.06636, 47.35486, 47.18500, 47.44778, 46.69307, 45.91500, 45.46000, 45.30524, 45.25500, 45.00820, 45.00738, 45.00048, 44.81645, 44.09631, 44.01846, 43.62878, 43.62906, 43.62509, 43.46634, 43.27000, 42.96500, 42.86361, 42.36620, 42.20903, 41.67511, 41.67511, 41.83280, 41.97568, 42.08000, 42.43000, 42.98000, 43.57109, 44.44000, 45.34752, 45.81689, 45.99469, 46.11693, 46.11693, 46.27542, 46.51223, 46.40877, 46.43960, 46.53868, 46.63710, 46.90008, 47.22022, 47.55334, 47.94000, 48.30292, 48.01981, 48.01000, 48.27000, 48.14000, 48.45000, 48.60926, 48.67074, 48.84000, 49.38905, 49.38425, 49.00000, 49.00070, 49.00000, 48.99986, 49.00000, 49.00000, 49.00000, 49.00000, 49.00000, 49.00000, 49.00000 ## 9 104.3699915, 104.0107886, 103.4376453, 103.8383960, 103.0768404, 102.4982711, 101.6580123, 100.6414335, 99.6939978, 99.1425586, 98.3691691, 97.4848820, 95.9368628, 95.2930262, 95.3808761, 96.4240166, 97.1769422, 97.6995976, 98.6013514, 98.9700110, 99.2637399, 100.1419808, 100.9025029, 101.3991134, 102.1561731, 102.5842607, 103.8682133, 104.7103841, 105.8176551, 105.8574459, 106.1085934, 105.6221114, 104.8878927, 104.5394902, 104.3699915, -1.0848430, -1.0592115, -0.7119459, 0.1045417, 0.5613614, 1.3987005, 2.0836974, 2.0993812, 3.1743285, 3.5903496, 4.2683703, 5.2463209, 5.4395133, 5.4798209, 4.9707822, 3.8688598, 3.3087906, 2.4531839, 1.8235066, 1.0428824, 0.1831416, -0.6503476, -2.0502621, -2.7997771, -3.6141460, -4.2202589, -5.0373150, -5.8732846, -5.8523556, -4.3055250, -3.0617766, -2.4288437, -2.3404253, -1.7823715, -1.0848430, 108.4868461, 108.0720911, 107.2650086, 106.0516459, 105.3654863, 106.2806242, 106.4541020, 108.2777633, 108.6936552, 109.4276673, 110.5861495, 111.5220614, 112.5596725, 113.4647335, 114.5645113, 115.7055270, 114.4789352, 112.9787683, 112.6148112, 110.7595756, 110.5392273, 108.6234786, 108.4868461, -6.4219850, -6.3457622, -5.9549850, -5.8959189, -6.8514161, -6.9249000, -7.3548996, -7.7666574, -7.6416004, -7.7406642, -8.1226047, -8.3021286, -8.3761809, -8.3489474, -8.7518169, -8.3708066, -7.7765276, -7.5942131, -6.9460357, -6.4651865, -6.8773577, -6.7776738, -6.4219850, 117.8820349, 117.0152145, 115.8655172, 115.5190784, 115.1340373, 114.6213554, 113.8058496, 112.8598092, 112.3802519, 111.7975485, 111.1591378, 110.5140609, 109.8302267, 109.6632601, 109.0691362, 108.9526575, 109.0918738, 109.5719479, 110.0709355, 110.2238461, 111.0482402, 111.7032906, 112.0681263, 113.2569943, 113.7556718, 114.4686516, 114.8648031, 116.0008578, 116.1480839, 116.5337968, 116.5600485, 117.5216435, 117.4783387, 117.8118584, 118.9967473, 117.8756271, 118.0483297, 117.3132325, 117.8820349, 4.1375514, 4.3060941, 4.3065591, 3.1692384, 2.8214818, 1.4306882, 1.2175487, 1.4977900, 1.4101210, 0.9044412, 0.9764782, 0.7731314, 1.3381357, 2.0064670, 1.3419339, 0.4153755, -0.4595065, -1.3149065, -1.5928740, -2.9340325, -3.0494260, -2.9944422, -3.4783920, -3.1187757, -3.4391696, -3.4957036, -4.1069841, -3.6570374, -4.0127263, -2.4835173, -1.4876608, -0.8037232, 0.1024747, 0.7842418, 0.9022191, 1.8276407, 2.2876901, 3.2344282, 4.1375514, 118.2606165, 117.9000183, 117.6320244, 117.0837374, 116.7401408, 117.2777307, 117.9704016, 119.1265068, 118.8784599, 118.2606165, -8.3623833, -8.0956812, -8.4493031, -8.4571579, -9.0329367, -9.0408949, -8.9066395, -8.7058249, -8.2806829, -8.3623833, 120.2950143, 120.7156088, 120.7755017, 120.4257556, 119.9003097, 118.9678085, 120.2950143, -10.2586500, -10.2395814, -9.9696754, -9.6659213, -9.3613404, -9.5579693, -10.2586500, 121.3416687, 120.7150920, 119.9209286, 119.9243909, 121.2544906, 122.7569829, 122.9035372, 122.0073645, 121.3416687, -8.5367396, -8.2369646, -8.4448589, -8.8104180, -8.9336663, -8.6498076, -8.0942343, -8.4606202, -8.5367396, 122.9275668, 121.6668168, 120.8857793, 120.0357019, 119.8259990, 119.3233940, 119.1809737, 118.7677690, 119.0783444, 119.4988355, 119.6536064, 119.3669056, 119.7965434, 120.4307166, 120.3900472, 120.3054529, 120.9723890, 120.8981816, 121.6191712, 121.4894633, 121.7382337, 122.7195691, 122.2363945, 122.6285153, 123.1623328, 123.1709628, 122.2718962, 122.4545724, 121.5082736, 122.3885299, 122.8227153, 123.2583993, 123.3405648, 121.4758208, 120.9359054, 120.0408696, 120.1830831, 121.0567249, 122.7230831, 123.6855050, 124.4370354, 125.2405005, 125.0659892, 124.0775224, 122.9275668, 0.8751924, 1.0139436, 1.3092227, 0.5664774, 0.1542545, -1.3531471, -2.1471038, -2.8019992, -3.4870220, -3.4944117, -4.4594174, -5.3798780, -5.6734002, -5.5282411, -4.0975790, -2.9316037, -2.6276429, -3.6021054, -4.1884779, -4.5745525, -4.8513315, -4.4641716, -5.2829330, -5.6345912, -5.3406039, -4.6836931, -3.5295000, -3.1860584, -1.9044829, -1.5168580, -0.9309506, -1.0762131, -0.6156727, -0.9559620, -1.4089059, -0.5196579, 0.2372468, 0.3812174, 0.4311368, 0.2355932, 0.4278812, 1.4198361, 1.6432592, 0.9171020, 0.8751924, 124.9686825, 123.9800090, 123.5500094, 123.4599890, 123.5799817, 124.4359501, 125.0885201, 125.0700200, 124.9686825, -8.8927902, -9.2900270, -9.9000156, -10.2399948, -10.3599875, -10.1400009, -9.3931731, -9.0899875, -8.8927902, 126.8749227, 127.2492151, 127.0006515, 125.9890336, 126.1838021, 126.8749227, -3.7909828, -3.4590650, -3.1293177, -3.1772735, -3.6073764, -3.7909828, 127.9323776, 127.6005115, 127.3994902, 127.6964746, 128.1000159, 128.3799988, 127.9680343, 128.1201697, 128.6359522, 128.6882487, 128.5945594, 128.0041561, 127.9323776, 2.1745963, 1.8106908, 1.0117215, -0.2665984, -0.8999964, -0.7800038, -0.2520773, 0.3564127, 0.2584858, 1.1323860, 1.5408107, 1.6285314, 2.1745963, 129.3709978, 128.1358793, 127.8988912, 128.5906836, 129.1552487, 129.9905465, 130.8348361, 130.4713440, 129.3709978, -2.8021542, -2.8436504, -3.3934360, -3.4286793, -3.3626368, -3.4463010, -3.8584722, -3.0937643, -2.8021542, 134.2101339, 134.7246245, 134.7270016, 134.4996253, 134.2903357, 134.1127755, 134.2101339, -6.8952377, -6.2144007, -5.7375823, -5.4450420, -5.7830575, -6.1424671, -6.8952377, 141.0002104, 139.9266842, 139.1849207, 138.3297274, 137.4407377, 136.2933142, 135.4576030, 134.4226274, 134.1433680, 133.9855481, 132.3801164, 131.8675379, 130.5195581, 130.9428398, 131.8362220, 132.2323735, 133.6962118, 133.7800310, 133.0668445, 131.9898043, 132.7537887, 132.7569410, 132.9839555, 133.3677047, 133.6628805, 135.1645976, 135.9892501, 137.9278398, 138.4079139, 138.6686215, 138.0390992, 137.6144739, 138.8814767, 139.1277666, 140.1434152, 141.0338518, 141.0170569, 141.0002104, -2.6001511, -2.4090516, -2.0512957, -1.7026865, -1.7035133, -2.3070423, -3.3677528, -2.7691847, -1.1518674, -0.7802105, -0.3695379, -0.6954611, -0.9377202, -1.4325221, -1.6171620, -2.2125261, -2.2145415, -2.4798483, -2.4604180, -2.8205510, -3.3117872, -3.7462826, -4.1129786, -4.0248186, -3.5388534, -4.4629314, -4.5465439, -5.3933656, -6.2328492, -7.3202247, -7.5978822, -8.4116826, -8.3809352, -8.0960430, -8.2971677, -9.1178928, -5.8590219, -2.6001511 world[, 1:3] # subset columns by column position ## iso_a2 name_long continent ## 1 FJ Fiji Oceania ## 2 TZ Tanzania Africa ## 3 EH Western Sahara Africa ## 4 CA Canada North America ## 5 US United States North America ## 6 KZ Kazakhstan Asia ## 7 UZ Uzbekistan Asia ## 8 PG Papua New Guinea Oceania ## 9 ID Indonesia Asia ## 10 AR Argentina South America ## 11 CL Chile South America ## 12 CD Democratic Republic of the Congo Africa ## 13 SO Somalia Africa ## 14 KE Kenya Africa ## 15 SD Sudan Africa ## 16 TD Chad Africa ## 17 HT Haiti North America ## 18 DO Dominican Republic North America ## 19 RU Russian Federation Europe ## 20 BS Bahamas North America ## 21 FK Falkland Islands South America ## 22 NO Norway Europe ## 23 GL Greenland North America ## 24 TF French Southern and Antarctic Lands Seven seas (open ocean) ## 25 TL Timor-Leste Asia ## 26 ZA South Africa Africa ## 27 LS Lesotho Africa ## 28 MX Mexico North America ## 29 UY Uruguay South America ## 30 BR Brazil South America ## 31 BO Bolivia South America ## 32 PE Peru South America ## 33 CO Colombia South America ## 34 PA Panama North America ## 35 CR Costa Rica North America ## 36 NI Nicaragua North America ## 37 HN Honduras North America ## 38 SV El Salvador North America ## 39 GT Guatemala North America ## 40 BZ Belize North America ## 41 VE Venezuela South America ## 42 GY Guyana South America ## 43 SR Suriname South America ## 44 FR France Europe ## 45 EC Ecuador South America ## 46 PR Puerto Rico North America ## 47 JM Jamaica North America ## 48 CU Cuba North America ## 49 ZW Zimbabwe Africa ## 50 BW Botswana Africa ## 51 NA Namibia Africa ## 52 SN Senegal Africa ## 53 ML Mali Africa ## 54 MR Mauritania Africa ## 55 BJ Benin Africa ## 56 NE Niger Africa ## 57 NG Nigeria Africa ## 58 CM Cameroon Africa ## 59 TG Togo Africa ## 60 GH Ghana Africa ## 61 CI Côte d&#39;Ivoire Africa ## 62 GN Guinea Africa ## 63 GW Guinea-Bissau Africa ## 64 LR Liberia Africa ## 65 SL Sierra Leone Africa ## 66 BF Burkina Faso Africa ## 67 CF Central African Republic Africa ## 68 CG Republic of the Congo Africa ## 69 GA Gabon Africa ## 70 GQ Equatorial Guinea Africa ## 71 ZM Zambia Africa ## 72 MW Malawi Africa ## 73 MZ Mozambique Africa ## 74 SZ eSwatini Africa ## 75 AO Angola Africa ## 76 BI Burundi Africa ## 77 IL Israel Asia ## 78 LB Lebanon Asia ## 79 MG Madagascar Africa ## 80 PS Palestine Asia ## 81 GM The Gambia Africa ## 82 TN Tunisia Africa ## 83 DZ Algeria Africa ## 84 JO Jordan Asia ## 85 AE United Arab Emirates Asia ## 86 QA Qatar Asia ## 87 KW Kuwait Asia ## 88 IQ Iraq Asia ## 89 OM Oman Asia ## 90 VU Vanuatu Oceania ## 91 KH Cambodia Asia ## 92 TH Thailand Asia ## 93 LA Lao PDR Asia ## 94 MM Myanmar Asia ## 95 VN Vietnam Asia ## 96 KP Dem. Rep. Korea Asia ## 97 KR Republic of Korea Asia ## 98 MN Mongolia Asia ## 99 IN India Asia ## 100 BD Bangladesh Asia ## 101 BT Bhutan Asia ## 102 NP Nepal Asia ## 103 PK Pakistan Asia ## 104 AF Afghanistan Asia ## 105 TJ Tajikistan Asia ## 106 KG Kyrgyzstan Asia ## 107 TM Turkmenistan Asia ## 108 IR Iran Asia ## 109 SY Syria Asia ## 110 AM Armenia Asia ## 111 SE Sweden Europe ## 112 BY Belarus Europe ## 113 UA Ukraine Europe ## 114 PL Poland Europe ## 115 AT Austria Europe ## 116 HU Hungary Europe ## 117 MD Moldova Europe ## 118 RO Romania Europe ## 119 LT Lithuania Europe ## 120 LV Latvia Europe ## 121 EE Estonia Europe ## 122 DE Germany Europe ## 123 BG Bulgaria Europe ## 124 GR Greece Europe ## 125 TR Turkey Asia ## 126 AL Albania Europe ## 127 HR Croatia Europe ## 128 CH Switzerland Europe ## 129 LU Luxembourg Europe ## 130 BE Belgium Europe ## 131 NL Netherlands Europe ## 132 PT Portugal Europe ## 133 ES Spain Europe ## 134 IE Ireland Europe ## 135 NC New Caledonia Oceania ## 136 SB Solomon Islands Oceania ## 137 NZ New Zealand Oceania ## 138 AU Australia Oceania ## 139 LK Sri Lanka Asia ## 140 CN China Asia ## 141 TW Taiwan Asia ## 142 IT Italy Europe ## 143 DK Denmark Europe ## 144 GB United Kingdom Europe ## 145 IS Iceland Europe ## 146 AZ Azerbaijan Asia ## 147 GE Georgia Asia ## 148 PH Philippines Asia ## 149 MY Malaysia Asia ## 150 BN Brunei Darussalam Asia ## 151 SI Slovenia Europe ## 152 FI Finland Europe ## 153 SK Slovakia Europe ## 154 CZ Czech Republic Europe ## 155 ER Eritrea Africa ## 156 JP Japan Asia ## 157 PY Paraguay South America ## 158 YE Yemen Asia ## 159 SA Saudi Arabia Asia ## 160 AQ Antarctica Antarctica ## 161 &lt;NA&gt; Northern Cyprus Asia ## 162 CY Cyprus Asia ## 163 MA Morocco Africa ## 164 EG Egypt Africa ## 165 LY Libya Africa ## 166 ET Ethiopia Africa ## 167 DJ Djibouti Africa ## 168 &lt;NA&gt; Somaliland Africa ## 169 UG Uganda Africa ## 170 RW Rwanda Africa ## 171 BA Bosnia and Herzegovina Europe ## 172 MK Macedonia Europe ## 173 RS Serbia Europe ## 174 ME Montenegro Europe ## 175 XK Kosovo Europe ## 176 TT Trinidad and Tobago North America ## 177 SS South Sudan Africa world[, c(&quot;name_long&quot;, &quot;lifeExp&quot;)] # subset columns by name ## name_long lifeExp ## 1 Fiji 69.96000 ## 2 Tanzania 64.16300 ## 3 Western Sahara NA ## 4 Canada 81.95305 ## 5 United States 78.84146 ## 6 Kazakhstan 71.62000 ## 7 Uzbekistan 71.03900 ## 8 Papua New Guinea 65.23000 ## 9 Indonesia 68.85600 ## 10 Argentina 76.25200 ## 11 Chile 79.11700 ## 12 Democratic Republic of the Congo 58.78200 ## 13 Somalia 55.46700 ## 14 Kenya 66.24200 ## 15 Sudan 64.00200 ## 16 Chad 52.20400 ## 17 Haiti 62.75700 ## 18 Dominican Republic 73.48300 ## 19 Russian Federation 70.74366 ## 20 Bahamas 75.37900 ## 21 Falkland Islands NA ## 22 Norway NA ## 23 Greenland NA ## 24 French Southern and Antarctic Lands NA ## 25 Timor-Leste 68.28500 ## 26 South Africa 60.99300 ## 27 Lesotho 53.26800 ## 28 Mexico 76.75300 ## 29 Uruguay 77.19000 ## 30 Brazil 75.04200 ## 31 Bolivia 68.35700 ## 32 Peru 74.51800 ## 33 Colombia 74.02200 ## 34 Panama 77.61000 ## 35 Costa Rica 79.44000 ## 36 Nicaragua 74.88400 ## 37 Honduras 73.18100 ## 38 El Salvador 73.01500 ## 39 Guatemala 72.86900 ## 40 Belize 70.02700 ## 41 Venezuela 74.19600 ## 42 Guyana 66.42500 ## 43 Suriname 71.13800 ## 44 France NA ## 45 Ecuador 75.87900 ## 46 Puerto Rico 79.39012 ## 47 Jamaica 75.68900 ## 48 Cuba 79.41500 ## 49 Zimbabwe 59.36000 ## 50 Botswana 64.78000 ## 51 Namibia 62.98100 ## 52 Senegal 66.37600 ## 53 Mali 57.00700 ## 54 Mauritania 62.90700 ## 55 Benin 60.37300 ## 56 Niger 59.22800 ## 57 Nigeria 52.54900 ## 58 Cameroon 57.11100 ## 59 Togo 59.60100 ## 60 Ghana 62.15400 ## 61 Côte d&#39;Ivoire 52.52000 ## 62 Guinea 58.84600 ## 63 Guinea-Bissau 56.59800 ## 64 Liberia 61.52700 ## 65 Sierra Leone 50.95100 ## 66 Burkina Faso 59.45700 ## 67 Central African Republic 50.62100 ## 68 Republic of the Congo 63.53600 ## 69 Gabon 65.21100 ## 70 Equatorial Guinea 57.18000 ## 71 Zambia 60.77500 ## 72 Malawi 61.93200 ## 73 Mozambique 57.09900 ## 74 eSwatini 56.28700 ## 75 Angola 60.85800 ## 76 Burundi 56.68800 ## 77 Israel 82.15366 ## 78 Lebanon 79.23100 ## 79 Madagascar 65.13300 ## 80 Palestine 73.12600 ## 81 The Gambia 60.70700 ## 82 Tunisia 75.33500 ## 83 Algeria 75.64100 ## 84 Jordan 74.03400 ## 85 United Arab Emirates 76.94800 ## 86 Qatar 77.88800 ## 87 Kuwait 74.45800 ## 88 Iraq 69.45800 ## 89 Oman 76.57800 ## 90 Vanuatu 71.70900 ## 91 Cambodia 68.25100 ## 92 Thailand 74.89500 ## 93 Lao PDR 65.97500 ## 94 Myanmar 66.28500 ## 95 Vietnam 75.85500 ## 96 Dem. Rep. Korea 71.17900 ## 97 Republic of Korea 81.72195 ## 98 Mongolia 68.84700 ## 99 India 68.02100 ## 100 Bangladesh 71.80300 ## 101 Bhutan 69.43000 ## 102 Nepal 69.51100 ## 103 Pakistan 66.13900 ## 104 Afghanistan 62.89500 ## 105 Tajikistan 70.69000 ## 106 Kyrgyzstan 70.40244 ## 107 Turkmenistan 67.55200 ## 108 Iran 75.46600 ## 109 Syria 69.81700 ## 110 Armenia 74.25500 ## 111 Sweden 82.25366 ## 112 Belarus 72.97073 ## 113 Ukraine 71.18659 ## 114 Poland 77.60244 ## 115 Austria 81.49024 ## 116 Hungary 75.76341 ## 117 Moldova 71.25800 ## 118 Romania 74.96098 ## 119 Lithuania 74.51707 ## 120 Latvia 74.12439 ## 121 Estonia 77.03415 ## 122 Germany 81.09024 ## 123 Bulgaria 74.46585 ## 124 Greece 81.38537 ## 125 Turkey 75.23900 ## 126 Albania 77.96300 ## 127 Croatia 77.47805 ## 128 Switzerland 83.19756 ## 129 Luxembourg 82.22927 ## 130 Belgium 81.28780 ## 131 Netherlands 81.70732 ## 132 Portugal 81.12195 ## 133 Spain 83.22927 ## 134 Ireland 81.34878 ## 135 New Caledonia 77.25287 ## 136 Solomon Islands 70.11300 ## 137 New Zealand 81.40488 ## 138 Australia 82.30000 ## 139 Sri Lanka 74.90600 ## 140 China 75.93200 ## 141 Taiwan NA ## 142 Italy 83.09024 ## 143 Denmark 80.70000 ## 144 United Kingdom 81.30488 ## 145 Iceland 82.86098 ## 146 Azerbaijan 71.80000 ## 147 Georgia 72.95100 ## 148 Philippines 68.81300 ## 149 Malaysia 74.97600 ## 150 Brunei Darussalam 76.91700 ## 151 Slovenia 81.07805 ## 152 Finland 81.18049 ## 153 Slovakia 76.81220 ## 154 Czech Republic 78.82439 ## 155 Eritrea 64.17400 ## 156 Japan 83.58780 ## 157 Paraguay 72.91300 ## 158 Yemen 64.52300 ## 159 Saudi Arabia 74.23400 ## 160 Antarctica NA ## 161 Northern Cyprus NA ## 162 Cyprus 80.17300 ## 163 Morocco 75.30900 ## 164 Egypt 71.12000 ## 165 Libya 71.65900 ## 166 Ethiopia 64.53500 ## 167 Djibouti 62.00600 ## 168 Somaliland NA ## 169 Uganda 59.22400 ## 170 Rwanda 66.18800 ## 171 Bosnia and Herzegovina 76.56100 ## 172 Macedonia 75.38400 ## 173 Serbia 75.33659 ## 174 Montenegro 76.71200 ## 175 Kosovo 71.09756 ## 176 Trinidad and Tobago 70.42600 ## 177 South Sudan 55.81700 Here you create a logical vector (sel_area) and then subset selecting only cases from world corresponding to the elements of the sel_area that are TRUE sel_area &lt;- world$area_km2 &lt; 10000 head(sel_area) ## [1] FALSE FALSE FALSE FALSE FALSE FALSE summary(sel_area) ## Mode FALSE TRUE ## logical 170 7 ( small_countries &lt;- world[sel_area, ] ) ## iso_a2 name_long continent region_un subregion ## 46 PR Puerto Rico North America Americas Caribbean ## 80 PS Palestine Asia Asia Western Asia ## 90 VU Vanuatu Oceania Oceania Melanesia ## 129 LU Luxembourg Europe Europe Western Europe ## 161 &lt;NA&gt; Northern Cyprus Asia Asia Western Asia ## 162 CY Cyprus Asia Asia Western Asia ## 176 TT Trinidad and Tobago North America Americas Caribbean ## type area_km2 pop lifeExp gdpPercap ## 46 Dependency 9224.663 3534874 79.39012 35066.046 ## 80 Disputed 5037.104 4294682 73.12600 4319.528 ## 90 Sovereign country 7490.040 258850 71.70900 2892.342 ## 129 Sovereign country 2416.870 556319 82.22927 93655.334 ## 161 Sovereign country 3786.365 NA NA NA ## 162 Sovereign country 6207.006 1152309 80.17300 29786.366 ## 176 Sovereign country 7737.810 1354493 70.42600 31181.821 ## geom ## 46 -66.28243, -67.10068, -67.24243, -67.18416, -66.59993, -65.84716, -65.59100, -65.77130, -66.28243, 18.51476, 18.52060, 18.37446, 17.94655, 17.98182, 17.97591, 18.22803, 18.42668, 18.51476 ## 80 35.39756, 35.54525, 35.54567, 35.18393, 34.97464, 35.22589, 34.97051, 34.92741, 35.39756, 31.48909, 31.78250, 32.39399, 32.53251, 31.86658, 31.75434, 31.61678, 31.35344, 31.48909 ## 90 166.79316, 167.00121, 167.27003, 167.10771, 166.62914, 166.64986, 166.79316, -15.66881, -15.61460, -15.74002, -14.93392, -14.62650, -15.39270, -15.66881, 167.21680, 167.18001, 167.51518, 167.84488, 167.21680, -15.89185, -16.16000, -16.59785, -16.46633, -15.89185 ## 129 6.043073, 5.782417, 5.674052, 5.897759, 6.186320, 6.242751, 6.043073, 50.128052, 50.090328, 49.529484, 49.442667, 49.463803, 49.902226, 50.128052 ## 161 32.73178, 32.91957, 33.19098, 33.38383, 33.45592, 33.47582, 33.52569, 33.67539, 33.86644, 33.97362, 33.90080, 34.57647, 33.66723, 32.94696, 32.80247, 32.73178, 35.14003, 35.08783, 35.17312, 35.16271, 35.10142, 35.00034, 35.03869, 35.01786, 35.09359, 35.05851, 35.24576, 35.67160, 35.37322, 35.38670, 35.14550, 35.14003 ## 162 32.73178, 32.25667, 32.49030, 32.97983, 34.00488, 33.97362, 33.86644, 33.67539, 33.52569, 33.47582, 33.45592, 33.38383, 33.19098, 32.91957, 32.73178, 35.14003, 35.10323, 34.70165, 34.57187, 34.97810, 35.05851, 35.09359, 35.01786, 35.03869, 35.00034, 35.10142, 35.16271, 35.17312, 35.08783, 35.14003 ## 176 -61.680, -61.660, -61.950, -61.770, -60.935, -60.895, -61.105, -61.680, 10.760, 10.365, 10.090, 10.000, 10.110, 10.855, 10.890, 10.760 Since you used the assignment operator the last line creates a new simple feature data frame, small_countries, containing nations whose surface area is smaller than 10,000 square kilometers Note: the geometry column remains fixed to the resulting data frame An operation on a {sf} data frame only changes the geometry when appropriate (e.g. by dissolving borders between adjacent polygons following aggregation). This means that the speed of operations with attribute data in {sf} data frames is the same as with columns in a data frames The {base} R function subset() provides another way to get the same result small_countries &lt;- subset(world, area_km2 &lt; 10000) small_countries &lt;- world |&gt; subset(area_km2 &lt; 10000) The {dplyr} verbs work on {sf} spatial data frames. The functions include dplyr::select() and dplyr::filter() CAUTION! The {dplyr} and {raster} packages have a select() function. When using both packages in the same session, the function in the most recently attached package will be used, ‘masking’ the other function. This will generate error messages containing text like: unable to find an inherited method for function ‘select’ for signature “sf” To avoid this error message and prevent ambiguity you should use the long-form function name prefixed by the package name and two colons dplyr::select() The dplyr::select() function picks the columns by name or position. For example, you can select only two columns, name_long and pop, with the following command world1 &lt;- world |&gt; dplyr::select(name_long, pop) names(world1) ## [1] &quot;name_long&quot; &quot;pop&quot; The result is a simple feature data frame with the geometry column With the dplyr::select() function you can subset and rename columns at the same time. Here you select the columns with names name_long and pop and give the pop column a new name (population) world |&gt; dplyr::select(name_long, population = pop) ## # A tibble: 177 × 2 ## name_long population ## &lt;chr&gt; &lt;dbl&gt; ## 1 Fiji 885806 ## 2 Tanzania 52234869 ## 3 Western Sahara NA ## 4 Canada 35535348 ## 5 United States 318622525 ## 6 Kazakhstan 17288285 ## 7 Uzbekistan 30757700 ## 8 Papua New Guinea 7755785 ## 9 Indonesia 255131116 ## 10 Argentina 42981515 ## # … with 167 more rows The dplyr::pull() function returns a single vector without the geometry world |&gt; dplyr::pull(pop) ## [1] 885806 52234869 NA 35535348 318622525 17288285 ## [7] 30757700 7755785 255131116 42981515 17613798 73722860 ## [13] 13513125 46024250 37737913 13569438 10572466 10405844 ## [19] 143819666 382169 NA NA 56295 NA ## [25] 1212814 54539571 2145785 124221600 3419546 204213133 ## [31] 10562159 30973354 47791911 3903986 4757575 6013997 ## [37] 8809216 6281189 15923559 351694 30738378 763393 ## [43] 547928 NA 15903112 3534874 2862087 11439767 ## [49] 15411675 2168573 2370992 14546111 16962846 4063920 ## [55] 10286712 19148219 176460502 22239904 7228915 26962563 ## [61] 22531350 11805509 1725744 4390737 7079162 17585977 ## [67] 4515392 4871101 1875713 1129424 15620974 17068838 ## [73] 27212382 1295097 26920466 9891790 8215700 5603279 ## [79] 23589801 4294682 1917852 11143908 39113313 8809306 ## [85] 9070867 2374419 3782450 35006080 3960925 258850 ## [91] 15270790 68416772 6576397 51924182 92544915 25116363 ## [97] 50746659 2923896 1293859294 159405279 776448 28323241 ## [103] 185546257 32758020 8362745 5835500 5466241 78411092 ## [109] 19203090 2906220 9696110 9474511 45271947 38011735 ## [115] 8546356 9866468 3556397 19908979 2932367 1993782 ## [121] 1314545 80982500 7223938 10892413 77030628 2889104 ## [127] 4238389 8188649 556319 11209057 16865008 10401062 ## [133] 46480882 4657740 268050 575504 4509700 23504138 ## [139] 20771000 1364270000 NA 60789140 5643475 64613160 ## [145] 327386 9535079 3727000 100102249 30228017 411704 ## [151] 2061980 5461512 5418649 10525347 NA 127276000 ## [157] 6552584 26246327 30776722 NA NA 1152309 ## [163] 34318082 91812566 6204108 97366774 912164 NA ## [169] 38833338 11345357 3566002 2077495 7130576 621810 ## [175] 1821800 1354493 11530971 The dplyr::filter() function keeps only rows matching given criteria, e.g., only countries with a very high average life expectancy world |&gt; sf::st_drop_geometry() |&gt; dplyr::filter(lifeExp &gt; 82) ## # A tibble: 9 × 10 ## iso_a2 name_long conti…¹ regio…² subre…³ type area_…⁴ pop lifeExp gdpPe…⁵ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 IL Israel Asia Asia Wester… Coun… 2.30e4 8.22e6 82.2 31702. ## 2 SE Sweden Europe Europe Northe… Sove… 4.51e5 9.70e6 82.3 44168. ## 3 CH Switzerla… Europe Europe Wester… Sove… 4.62e4 8.19e6 83.2 57218. ## 4 LU Luxembourg Europe Europe Wester… Sove… 2.42e3 5.56e5 82.2 93655. ## 5 ES Spain Europe Europe Southe… Sove… 5.02e5 4.65e7 83.2 31195. ## 6 AU Australia Oceania Oceania Austra… Coun… 7.69e6 2.35e7 82.3 43547. ## 7 IT Italy Europe Europe Southe… Sove… 3.15e5 6.08e7 83.1 33946. ## 8 IS Iceland Europe Europe Northe… Sove… 1.08e5 3.27e5 82.9 41701. ## 9 JP Japan Asia Asia Easter… Sove… 4.05e5 1.27e8 83.6 37337. ## # … with abbreviated variable names ¹​continent, ²​region_un, ³​subregion, ## # ⁴​area_km2, ⁵​gdpPercap Aggregation involves a grouping variable in the dplyr::group_by() function and a summary variable specified in the dplyr::summarize() function. For example, here you aggregate the population by continent and include a count of the number of countries by continent world |&gt; dplyr::group_by(continent) |&gt; dplyr::summarize(Population = sum(pop, na.rm = TRUE), nCountries = dplyr::n()) ## Simple feature collection with 8 features and 3 fields ## Geometry type: GEOMETRY ## Dimension: XY ## Bounding box: xmin: -180 ymin: -89.9 xmax: 180 ymax: 83.64513 ## Geodetic CRS: WGS 84 ## # A tibble: 8 × 4 ## continent Population nCountries geom ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;GEOMETRY [°]&gt; ## 1 Africa 1154946633 51 MULTIPOLYGON (((36.86623 22, 36… ## 2 Antarctica 0 1 MULTIPOLYGON (((-180 -89.9, 180… ## 3 Asia 4311408059 47 MULTIPOLYGON (((36.14976 35.821… ## 4 Europe 669036256 39 MULTIPOLYGON (((26.29 35.29999,… ## 5 North America 565028684 18 MULTIPOLYGON (((-82.26815 23.18… ## 6 Oceania 37757833 7 MULTIPOLYGON (((166.7932 -15.66… ## 7 Seven seas (open ocean) 0 1 POLYGON ((68.935 -48.625, 68.86… ## 8 South America 412060811 13 MULTIPOLYGON (((-66.95992 -54.8… The two columns in the resulting table are Population and nCountries. The functions sum() and dplyr::n() were the aggregating functions The result is a simple feature data frame with a single row representing attributes of the world and the geometry as a single multi-polygon through the geometric union operator You can chain together functions to find the world’s three most populous continents and the number of countries they contain with the dplyr::top_n() function world |&gt; dplyr::select(pop, continent) |&gt; dplyr::group_by(continent) |&gt; dplyr::summarize(Population = sum(pop, na.rm = TRUE), nCountries = dplyr::n()) |&gt; dplyr::top_n(n = 3, wt = Population) ## Simple feature collection with 3 features and 3 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -180 ymin: -34.81917 xmax: 180 ymax: 81.2504 ## Geodetic CRS: WGS 84 ## # A tibble: 3 × 4 ## continent Population nCountries geom ## * &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;MULTIPOLYGON [°]&gt; ## 1 Africa 1154946633 51 (((36.86623 22, 36.69069 22.20485, 35.52598 2… ## 2 Asia 4311408059 47 (((36.14976 35.82153, 35.90502 35.41001, 35.9… ## 3 Europe 669036256 39 (((26.29 35.29999, 25.74502 35.18, 25.76921 3… You create a new column from existing columns with dplyr::mutate(). For example, if you want to calculate population density for each country divide the population column, here pop, by an area column, here area_km2 with unit area in square kilometers world |&gt; dplyr::mutate(Population_Density = pop / area_km2) ## Simple feature collection with 177 features and 11 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -180 ymin: -89.9 xmax: 180 ymax: 83.64513 ## Geodetic CRS: WGS 84 ## # A tibble: 177 × 12 ## iso_a2 name_l…¹ conti…² regio…³ subre…⁴ type area_…⁵ pop lifeExp gdpPe…⁶ ## * &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 FJ Fiji Oceania Oceania Melane… Sove… 1.93e4 8.86e5 70.0 8222. ## 2 TZ Tanzania Africa Africa Easter… Sove… 9.33e5 5.22e7 64.2 2402. ## 3 EH Western… Africa Africa Northe… Inde… 9.63e4 NA NA NA ## 4 CA Canada North … Americ… Northe… Sove… 1.00e7 3.55e7 82.0 43079. ## 5 US United … North … Americ… Northe… Coun… 9.51e6 3.19e8 78.8 51922. ## 6 KZ Kazakhs… Asia Asia Centra… Sove… 2.73e6 1.73e7 71.6 23587. ## 7 UZ Uzbekis… Asia Asia Centra… Sove… 4.61e5 3.08e7 71.0 5371. ## 8 PG Papua N… Oceania Oceania Melane… Sove… 4.65e5 7.76e6 65.2 3709. ## 9 ID Indones… Asia Asia South-… Sove… 1.82e6 2.55e8 68.9 10003. ## 10 AR Argenti… South … Americ… South … Sove… 2.78e6 4.30e7 76.3 18798. ## # … with 167 more rows, 2 more variables: geom &lt;MULTIPOLYGON [°]&gt;, ## # Population_Density &lt;dbl&gt;, and abbreviated variable names ¹​name_long, ## # ²​continent, ³​region_un, ⁴​subregion, ⁵​area_km2, ⁶​gdpPercap world |&gt; dplyr::transmute(Population_Density = pop / area_km2) ## Simple feature collection with 177 features and 1 field ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -180 ymin: -89.9 xmax: 180 ymax: 83.64513 ## Geodetic CRS: WGS 84 ## # A tibble: 177 × 2 ## Population_Density geom ## * &lt;dbl&gt; &lt;MULTIPOLYGON [°]&gt; ## 1 45.9 (((-180 -16.55522, -179.9174 -16.50178, -179.7933 -16.020… ## 2 56.0 (((33.90371 -0.95, 31.86617 -1.02736, 30.76986 -1.01455, … ## 3 NA (((-8.66559 27.65643, -8.817828 27.65643, -8.794884 27.12… ## 4 3.54 (((-132.71 54.04001, -133.18 54.16998, -133.2397 53.85108… ## 5 33.5 (((-171.7317 63.78252, -171.7911 63.40585, -171.5531 63.3… ## 6 6.33 (((87.35997 49.21498, 86.82936 49.82667, 85.54127 49.6928… ## 7 66.7 (((55.96819 41.30864, 57.09639 41.32231, 56.93222 41.8260… ## 8 16.7 (((141.0002 -2.600151, 141.0171 -5.859022, 141.0339 -9.11… ## 9 140. (((104.37 -1.084843, 104.0108 -1.059212, 103.4376 -0.7119… ## 10 15.4 (((-68.63401 -52.63637, -68.63335 -54.8695, -67.56244 -54… ## # … with 167 more rows The dplyr::transmute() function performs the same computation but also removes the other columns (except the geometry column) Filtering on geographic boundaries The {USAboundaries} package has historical and contemporary boundaries for the United States provided by the U.S. Census Bureau Individual states are extracted using the us_states() function. CAUTION: this function has the same name as the object us_states from the {spData} package. Here use the argument states = to get the Kansas state boundary KS.sf &lt;- USAboundaries::us_states(states = &quot;Kansas&quot;) To visualize the geometry use the geom_sf() function from {ggplot2} library(ggplot2) ggplot(data = KS.sf) + geom_sf() And check the native coordinate reference system (CRS) with the sf::st_crs() function sf::st_crs(KS.sf) ## Coordinate Reference System: ## User input: EPSG:4326 ## wkt: ## GEOGCRS[&quot;WGS 84&quot;, ## DATUM[&quot;World Geodetic System 1984&quot;, ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## CS[ellipsoidal,2], ## AXIS[&quot;geodetic latitude (Lat)&quot;,north, ## ORDER[1], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## AXIS[&quot;geodetic longitude (Lon)&quot;,east, ## ORDER[2], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## USAGE[ ## SCOPE[&quot;Horizontal component of 3D system.&quot;], ## AREA[&quot;World.&quot;], ## BBOX[-90,-180,90,180]], ## ID[&quot;EPSG&quot;,4326]] The polygon geometry includes the border and the area inside the border. The CRS is described by the 4326 EPSG code (World Geodetic System 1984) and implemented using well-known text You use a geometric operation to filter spatial data geographically As an example, here you will filter the tornado tracks (line strings), keeping only those tracks that fall within the Kansas border (defined by a multi-polygon geometry) First import the tornado data. Here you check if the tornado data file is in your list of files with the if() conditional and the list.files() function. You only download the data file if the file is not (!) in (%in%) the list Consider the set of integers from 1 to 10 x &lt;- 1:10 5 %in% x ## [1] TRUE 11 %in% x ## [1] FALSE !11 %in% x ## [1] TRUE 1:2 %in% x ## [1] TRUE TRUE loc &lt;- &quot;http://www.spc.noaa.gov/gis/svrgis/zipped/1950-2021-torn-aspath.zip&quot; if(!&quot;1950-2021-torn-aspath&quot; %in% list.files(here::here(&quot;data&quot;))) { download.file(url = loc, destfile = here::here(&quot;data&quot;, &quot;1950-2021-torn-aspath.zip&quot;)) unzip(zipfile = here::here(&quot;data&quot;, &quot;1950-2021-torn-aspath.zip&quot;), exdir = here::here(&quot;data&quot;)) } Torn.sf &lt;- sf::st_read(dsn = here::here(&quot;data&quot;, &quot;1950-2021-torn-aspath&quot;), layer = &quot;1950-2021-torn-aspath&quot;) ## Reading layer `1950-2021-torn-aspath&#39; from data source ## `/Users/jameselsner/Desktop/ClassNotes/ASS-2023/data/1950-2021-torn-aspath&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 67558 features and 22 fields ## Geometry type: LINESTRING ## Dimension: XY ## Bounding box: xmin: -163.53 ymin: 17.7212 xmax: -64.7151 ymax: 61.02 ## Geodetic CRS: WGS 84 The geometries are line strings representing the straight-line approximate track of each tornado. They have the same EPSG code of 4326 as the Kansas polygon Then to filter the tracks keeping on those that fall within the border of Kansas you use the sf::st_intersection() function. The first argument (x =) is the simple feature data frame that you want to filter and the second argument (y =) defines the geometry over which the filter occurs KS_Torn.sf &lt;- sf::st_intersection(x = Torn.sf, y = KS.sf) ## Warning: attribute variables are assumed to be spatially constant throughout ## all geometries You can use the pipe operator (|&gt;) to pass the first argument to the function KS_Torn.sf &lt;- Torn.sf |&gt; sf::st_intersection(y = KS.sf) ## Warning: attribute variables are assumed to be spatially constant throughout ## all geometries The warning tells you that attributes are not filtered the way the geometries are and they might not represent the new clipped geometry Make a plot to check if things appear as you expect. Start with the state border as a polygon layer then add the tracks as a line string layer ggplot() + geom_sf(data = KS.sf) + geom_sf(data = KS_Torn.sf) The map shows a mix of lines and points. Something is amiss. You can check the distribution of geometry types with KS_Torn.sf |&gt; sf::st_geometry_type() |&gt; table() ## ## GEOMETRY POINT LINESTRING POLYGON ## 0 687 3726 0 ## MULTIPOINT MULTILINESTRING MULTIPOLYGON GEOMETRYCOLLECTION ## 0 1 0 0 ## CIRCULARSTRING COMPOUNDCURVE CURVEPOLYGON MULTICURVE ## 0 0 0 0 ## MULTISURFACE CURVE SURFACE POLYHEDRALSURFACE ## 0 0 0 0 ## TIN TRIANGLE ## 0 0 Note that no tornado geometry lies outside the state border. Line strings that continue beyond the border are clipped at the border. However the attribute values (like track length) represent the entire track and that is the cause of the warning message Instead you want the entire tornado track for all tornadoes that passed into (or through) the state, then you first use the geometric binary predicate function sf::st_intersects(). With the argument sparse = FALSE a matrix with a single column of TRUEs and FALSEs is returned Here you use the piping operator to implicitly specify the x = argument as the Torn.sf data frame Intersects &lt;- Torn.sf |&gt; sf::st_intersects(y = KS.sf, sparse = FALSE) The result is a column matrix of type logical indicating whether the tornado geometry intersected the Kansas polygon geometry Intersects |&gt; head() ## [,1] ## [1,] FALSE ## [2,] FALSE ## [3,] FALSE ## [4,] FALSE ## [5,] FALSE ## [6,] FALSE The number of Kansas intersecting tornadoes is a summation of that column matrix Intersects |&gt; sum() ## [1] 4414 Next you assign to a new data frame the original data frame after filter observations (rows) where Interects is TRUE KS_Torn2.sf &lt;- Torn.sf[Intersects, ] Again visualize with a map ggplot() + geom_sf(data = KS.sf) + geom_sf(data = KS_Torn2.sf) This looks correct Are tornadoes more common in some parts of Kansas than others? One way to answer this question is to see how far away the center of tornado activity is from the center of the state Start by finding the center of the state using the sf::st_centroid() function geocenterKS &lt;- KS.sf |&gt; sf::st_centroid() ## Warning in st_centroid.sf(KS.sf): st_centroid assumes attributes are constant ## over geometries of x Next combine the line strings representing the tornado tracks into a geometry collection with the sf::st_combine() function and then find the centroid of this collection using the sf::st_centroid() function centerKStornadoes &lt;- KS_Torn2.sf |&gt; sf::st_combine() |&gt; sf::st_centroid() Draw a map ggplot() + geom_sf(data = KS.sf) + geom_sf(data = geocenterKS, col = &quot;blue&quot;) + geom_sf(data = centerKStornadoes, col = &quot;red&quot;) Compute the distance between the to geometry points in meters using the sf::st_distance() function geocenterKS |&gt; sf::st_distance(centerKStornadoes) ## Units: [m] ## [,1] ## [1,] 24938.9 Less than 25 km More examples: https://www.jla-data.net/eng/spatial-aggregation/ Joining data frames Combining data from different sources based on a shared variable is a common GIS operation. The {dplyr} package has join functions that follow naming conventions used in database languages Given two data frames labeled x and y, the join functions add columns from y to x, matching rows based on the function name inner_join(): includes all rows in x and y left_join(): includes all rows in x full_join(): includes all rows in x or y Join functions work the same on data frames and on simple feature data frames. The most common type of attribute join on spatial data takes a simple feature data frame as the first argument and adds columns to it from a data a frame specified as the second argument For example, you combine data on coffee production with the spData::world simple feature data frame. Coffee production by country is in the data frame called spData::coffee_data spData::coffee_data |&gt; dplyr::glimpse() ## Rows: 47 ## Columns: 3 ## $ name_long &lt;chr&gt; &quot;Angola&quot;, &quot;Bolivia&quot;, &quot;Brazil&quot;, &quot;Burundi&quot;, &quot;Came… ## $ coffee_production_2016 &lt;int&gt; NA, 3, 3277, 37, 8, NA, 4, 1330, 28, 114, NA, 1… ## $ coffee_production_2017 &lt;int&gt; NA, 4, 2786, 38, 6, NA, 12, 1169, 32, 130, NA, … It has 3 columns: name_long names of the major coffee-producing nations and coffee_production_2016 and coffee_production_2017 contain estimated values for coffee production in units of 60-kg bags per year The GDP (per capita) is in the spData::world simple feature data frame spData::world |&gt; dplyr::glimpse() ## Rows: 177 ## Columns: 11 ## $ iso_a2 &lt;chr&gt; &quot;FJ&quot;, &quot;TZ&quot;, &quot;EH&quot;, &quot;CA&quot;, &quot;US&quot;, &quot;KZ&quot;, &quot;UZ&quot;, &quot;PG&quot;, &quot;ID&quot;, &quot;AR&quot;, … ## $ name_long &lt;chr&gt; &quot;Fiji&quot;, &quot;Tanzania&quot;, &quot;Western Sahara&quot;, &quot;Canada&quot;, &quot;United Stat… ## $ continent &lt;chr&gt; &quot;Oceania&quot;, &quot;Africa&quot;, &quot;Africa&quot;, &quot;North America&quot;, &quot;North Ameri… ## $ region_un &lt;chr&gt; &quot;Oceania&quot;, &quot;Africa&quot;, &quot;Africa&quot;, &quot;Americas&quot;, &quot;Americas&quot;, &quot;Asia… ## $ subregion &lt;chr&gt; &quot;Melanesia&quot;, &quot;Eastern Africa&quot;, &quot;Northern Africa&quot;, &quot;Northern … ## $ type &lt;chr&gt; &quot;Sovereign country&quot;, &quot;Sovereign country&quot;, &quot;Indeterminate&quot;, &quot;… ## $ area_km2 &lt;dbl&gt; 19289.97, 932745.79, 96270.60, 10036042.98, 9510743.74, 2729… ## $ pop &lt;dbl&gt; 885806, 52234869, NA, 35535348, 318622525, 17288285, 3075770… ## $ lifeExp &lt;dbl&gt; 69.96000, 64.16300, NA, 81.95305, 78.84146, 71.62000, 71.039… ## $ gdpPercap &lt;dbl&gt; 8222.2538, 2402.0994, NA, 43079.1425, 51921.9846, 23587.3375… ## $ geom &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((-180 -16.55..., MULTIPOLYGON ((… Select the columns name_long and gdpPercap and assign these columns to a new simple feature data frame called world.sf ( world.sf &lt;- spData::world |&gt; dplyr::select(name_long, gdpPercap) ) ## Simple feature collection with 177 features and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -180 ymin: -89.9 xmax: 180 ymax: 83.64513 ## Geodetic CRS: WGS 84 ## # A tibble: 177 × 3 ## name_long gdpPercap geom ## &lt;chr&gt; &lt;dbl&gt; &lt;MULTIPOLYGON [°]&gt; ## 1 Fiji 8222. (((-180 -16.55522, -179.9174 -16.50178, -179.7933… ## 2 Tanzania 2402. (((33.90371 -0.95, 31.86617 -1.02736, 30.76986 -1… ## 3 Western Sahara NA (((-8.66559 27.65643, -8.817828 27.65643, -8.7948… ## 4 Canada 43079. (((-132.71 54.04001, -133.18 54.16998, -133.2397 … ## 5 United States 51922. (((-171.7317 63.78252, -171.7911 63.40585, -171.5… ## 6 Kazakhstan 23587. (((87.35997 49.21498, 86.82936 49.82667, 85.54127… ## 7 Uzbekistan 5371. (((55.96819 41.30864, 57.09639 41.32231, 56.93222… ## 8 Papua New Guinea 3709. (((141.0002 -2.600151, 141.0171 -5.859022, 141.03… ## 9 Indonesia 10003. (((104.37 -1.084843, 104.0108 -1.059212, 103.4376… ## 10 Argentina 18798. (((-68.63401 -52.63637, -68.63335 -54.8695, -67.5… ## # … with 167 more rows The dplyr::left_join() function takes the data frame named by the argument x = and joins it to the data frame named by the argument y = using a common variable name ( world_coffee.sf &lt;- dplyr::left_join(x = world.sf, y = spData::coffee_data) ) ## Joining, by = &quot;name_long&quot; ## Simple feature collection with 177 features and 4 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -180 ymin: -89.9 xmax: 180 ymax: 83.64513 ## Geodetic CRS: WGS 84 ## # A tibble: 177 × 5 ## name_long gdpPercap geom coffe…¹ coffe…² ## &lt;chr&gt; &lt;dbl&gt; &lt;MULTIPOLYGON [°]&gt; &lt;int&gt; &lt;int&gt; ## 1 Fiji 8222. (((-180 -16.55522, -179.9174 -16.… NA NA ## 2 Tanzania 2402. (((33.90371 -0.95, 31.86617 -1.02… 81 66 ## 3 Western Sahara NA (((-8.66559 27.65643, -8.817828 2… NA NA ## 4 Canada 43079. (((-132.71 54.04001, -133.18 54.1… NA NA ## 5 United States 51922. (((-171.7317 63.78252, -171.7911 … NA NA ## 6 Kazakhstan 23587. (((87.35997 49.21498, 86.82936 49… NA NA ## 7 Uzbekistan 5371. (((55.96819 41.30864, 57.09639 41… NA NA ## 8 Papua New Guinea 3709. (((141.0002 -2.600151, 141.0171 -… 114 74 ## 9 Indonesia 10003. (((104.37 -1.084843, 104.0108 -1.… 742 360 ## 10 Argentina 18798. (((-68.63401 -52.63637, -68.63335… NA NA ## # … with 167 more rows, and abbreviated variable names ¹​coffee_production_2016, ## # ²​coffee_production_2017 Because the two data frames share a common variable name (name_long) the join works without using the by = argument. The result is a simple feature data frame identical to the world.sf object but with two new variables indicating coffee production in 2016 and 2017 names(world_coffee.sf) ## [1] &quot;name_long&quot; &quot;gdpPercap&quot; &quot;geom&quot; ## [4] &quot;coffee_production_2016&quot; &quot;coffee_production_2017&quot; For a join to work there must be at least one variable name in common Since the object listed in the x = argument is a simple feature data frame, the join function returns a simple feature data frame with the same number of rows (observations) Although there are only 47 rows of data in spData::coffee_data, all 177 of the country records in world.sf are kept intact in world_coffee.sf. Rows in the first dataset with no match are assigned NA values for the new coffee production variable If you want to keep only countries that have a match in the key variable then use dplyr::inner_join(). Here you use the piping operator to implicitly specify the x = argument as the world.sf data frame world.sf |&gt; dplyr::inner_join(spData::coffee_data) ## Joining, by = &quot;name_long&quot; ## Simple feature collection with 45 features and 4 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -117.1278 ymin: -33.76838 xmax: 156.02 ymax: 35.49401 ## Geodetic CRS: WGS 84 ## # A tibble: 45 × 5 ## name_long gdpPercap geom coffe…¹ coffe…² ## &lt;chr&gt; &lt;dbl&gt; &lt;MULTIPOLYGON [°]&gt; &lt;int&gt; &lt;int&gt; ## 1 Tanzania 2402. (((33.90371 -0.95, 31.86617 -1.… 81 66 ## 2 Papua New Guinea 3709. (((141.0002 -2.600151, 141.0171… 114 74 ## 3 Indonesia 10003. (((104.37 -1.084843, 104.0108 -… 742 360 ## 4 Kenya 2753. (((39.20222 -4.67677, 39.60489 … 60 50 ## 5 Dominican Republic 12663. (((-71.7083 18.045, -71.65766 1… 1 NA ## 6 Timor-Leste 6263. (((124.9687 -8.89279, 125.07 -9… 14 2 ## 7 Mexico 16623. (((-117.1278 32.53534, -116.721… 151 220 ## 8 Brazil 15374. (((-53.37366 -33.76838, -52.712… 3277 2786 ## 9 Bolivia 6325. (((-69.52968 -10.95173, -68.665… 3 4 ## 10 Peru 11548. (((-69.89364 -4.298187, -70.394… 585 625 ## # … with 35 more rows, and abbreviated variable names ¹​coffee_production_2016, ## # ²​coffee_production_2017 You can join in the other direction as well, starting with a regular data frame and adding variables from a simple features object More information on attribute data operations such as these is given here: https://geocompr.robinlovelace.net/attr.html Interpolating using areal weights Areal-weighted interpolation estimates the value of some variable from a set of polygons to an overlapping but incongruent set of target polygons For example, suppose you want demographic information given at the Census tract level to be estimated within the tornado damage path. Damage paths do not align with census tract boundaries so areal weighted interpolation is needed to get demographic estimates at the tornado level The function sf::st_interpolate_aw() performs areal-weighted interpolation of polygon data. As an example, consider the number of births by county in North Carolina in over the period 1970 through 1974 (BIR74) The data are available as a shapefile as part of the {sf} package system file. Use the sf::st_read() function together with the system.file() function to import the data nc.sf &lt;- sf::st_read(system.file(&quot;shape/nc.shp&quot;, package = &quot;sf&quot;)) ## Reading layer `nc&#39; from data source ## `/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library/sf/shape/nc.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 100 features and 14 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 ## Geodetic CRS: NAD27 plot(nc.sf$geometry) Each polygon is a county. The union of all polygons defines the areal extent of the simple feature column and is retrieved as a bbox (bounding box) object with the sf::st_bbox() function nc.sf |&gt; sf::st_bbox() ## xmin ymin xmax ymax ## -84.32385 33.88199 -75.45698 36.58965 The domain extends from 84.32W to 75.46W and from 33.88N to 36.59N Create a map filling the counties by the values in the variable BIR74 (number of births in 1974) with the fill = aesthetic ggplot(data = nc.sf) + geom_sf(mapping = aes(fill = BIR74)) Next construct a 20 by 10 grid of polygons that overlap the state using the sf::st_make_grid() function. The function takes the bounding box from the nc.sf simple feature data frame and constructs a two-dimension grid using the dimensions specified with the n = argument g.sfc &lt;- sf::st_make_grid(nc.sf, n = c(20, 10)) ggplot() + geom_sf(data = g.sfc, col = &quot;red&quot;) + geom_sf(data = nc.sf, fill = &quot;transparent&quot;) The result is an overlapping, but incongruent, grid of polygons (cells) as a sfc (simple feature column) Use the sf::st_interpolate_aw() function with the first argument a simple feature data frame for which you want to aggregate a variable and the argument to = to the set of polygons for which you want the variable to be aggregated The name of the variable must be in quotes inside the subset operator []. The argument extensive = if FALSE (default) assumes the variable is intensive An extensive variable depends on the amount where as an intensive variable does not. In physics a variable like heat has extensive properties (Joules are additive) while temperature has intensive properties. Population has extensive properties (the number of people is additive) while population density has intensive properties For illustration here you assume the number of births is intensive and you interpolate the number of births in the county to a number of births in each cell of the grid a1.sf &lt;- sf::st_interpolate_aw(nc.sf[&quot;BIR74&quot;], to = g.sfc, extensive = FALSE) ## Warning in st_interpolate_aw.sf(nc.sf[&quot;BIR74&quot;], to = g.sfc, extensive = FALSE): ## st_interpolate_aw assumes attributes are constant or uniform over areas of x The result is a simple feature data frame with the same polygons geometry as the sfc grid and a single variable called (BIR74) ( p1 &lt;- ggplot() + geom_sf(data = a1.sf, mapping = aes(fill = BIR74)) + scale_fill_continuous(limits = c(0, 18000)) + labs(title = &quot;Assuming the variable is intensive&quot;) ) The average number of births across the state at the county level matches (roughly) the average number of births across the grid of polygons mean(a1.sf$BIR74) / mean(nc.sf$BIR74) ## [1] 1.040669 On average across the grid there are four percent more births than on average across the counties But the sums are much different sum(a1.sf$BIR74) / sum(nc.sf$BIR74) ## [1] 1.436123 There are nearly 44% more births in total across the grid than across the state An intensive variable is independent of the spatial units (e.g., population density, percentages); a variable that has been normalized in some fashion. An extensive variable depends on the spatial unit (e.g., population totals). Assuming a uniform population density, the number of people will depend on the size of the spatial area Since the number of births in each county is an extensive variable, you change the extensive = argument to TRUE a2.sf &lt;- sf::st_interpolate_aw(nc.sf[&quot;BIR74&quot;], to = g.sfc, extensive = TRUE) ## Warning in st_interpolate_aw.sf(nc.sf[&quot;BIR74&quot;], to = g.sfc, extensive = TRUE): ## st_interpolate_aw assumes attributes are constant or uniform over areas of x ( p2 &lt;- ggplot(a2.sf) + geom_sf(mapping = aes(fill = BIR74)) + scale_fill_continuous(limits = c(0, 18000)) + labs(title = &quot;Assuming the variable is extensive&quot;) ) In this case you preserve the total number of births across the domain. You verify this ‘mass preservation’ property (pycnophylactic property) by showing that the ratio of the sums is one sum(a2.sf$BIR74) / sum(nc.sf$BIR74) ## [1] 1 Here you create a plot of both interpolations side-by-side library(patchwork) p1 / p2 Example: tornado paths and housing units Here you are interested in the number of houses (housing units) affected by tornadoes occurring in Florida 2014-2021. You begin by creating a polygon geometry for each tornado record Import the data, filter on yr (year) and st (state) and transform the native CRS to 6439 (Florida Albers) FL_Torn.sf &lt;- Torn.sf |&gt; dplyr::filter(yr &gt;= 2014, st == &quot;FL&quot;) |&gt; sf::st_transform(crs = 6439) Next change the geometries from line strings representing tracks to polygons representing the tornado path (‘damage footprint’ length times width). Damage path width is an attribute variable labeled wid First create new a new variable with the width in units of meters and then use the st_buffer() function with the dist = argument set to 1/2 the width. FL_Torn.sf &lt;- FL_Torn.sf |&gt; dplyr::mutate(Width = wid * .9144) FL_TornPath.sf &lt;- FL_Torn.sf |&gt; sf::st_buffer(dist = FL_Torn.sf$Width / 2) To see the change from line string track to a polygon path plot both together for one of the tornadoes ggplot() + geom_sf(data = FL_TornPath.sf[10, ]) + geom_sf(data = FL_Torn.sf[10, ], col = &quot;red&quot;) Now you want the number of houses within this path. The housing units are from the census data. You can access these data with the tidycensus::get_acs() function. The {tidycensus} package is an interface to the decennial US Census and American Community Survey APIs and the US Census Bureau’s geographic boundary files. Functions return Census and ACS data as simple feature data frames for all Census geographies Note: You need to get an API key from U.S. Census. Then file.create(&quot;CensusAPI&quot;) # open then copy/paste your API key To ensure the file is only readable by you, not by any other user on the system use the function Sys.chmod() then read the key and install it. Sys.chmod(&quot;CensusAPI&quot;, mode = &quot;0400&quot;) key &lt;- readr::read_file(&quot;CensusAPI&quot;) tidycensus::census_api_key(key, install = TRUE, overwrite = TRUE) readRenviron(&quot;~/.Renviron&quot;) If you are using GitHub, make sure the file is listed in the file .gitignore so it doesn’t get included in your git public repository The geometry is the tract level and the variable is the un-weighted sample housing units (B00002_001). Transform the CRS to that of the tornadoes with the crs = argument Census.sf &lt;- tidycensus::get_acs(geography = &quot;tract&quot;, variables = &quot;B00002_001&quot;, state = &quot;FL&quot;, year = 2015, geometry = TRUE) |&gt; sf::st_transform(crs = sf::st_crs(FL_TornPath.sf)) ## Getting data from the 2011-2015 5-year ACS ## Downloading feature geometry from the Census website. To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`. ## Downloading: 11 kB Downloading: 11 kB Downloading: 15 kB Downloading: 15 kB Downloading: 20 kB Downloading: 20 kB Downloading: 20 kB Downloading: 20 kB Downloading: 25 kB Downloading: 25 kB Downloading: 25 kB Downloading: 25 kB Downloading: 32 kB Downloading: 32 kB Downloading: 32 kB Downloading: 32 kB Downloading: 36 kB Downloading: 36 kB Downloading: 41 kB Downloading: 41 kB Downloading: 44 kB Downloading: 44 kB Downloading: 44 kB Downloading: 44 kB Downloading: 49 kB Downloading: 49 kB Downloading: 52 kB Downloading: 52 kB Downloading: 60 kB Downloading: 60 kB Downloading: 64 kB Downloading: 64 kB Downloading: 68 kB Downloading: 68 kB Downloading: 72 kB Downloading: 72 kB Downloading: 77 kB Downloading: 77 kB Downloading: 85 kB Downloading: 85 kB Downloading: 89 kB Downloading: 89 kB Downloading: 98 kB Downloading: 98 kB Downloading: 110 kB Downloading: 110 kB Downloading: 120 kB Downloading: 120 kB Downloading: 120 kB Downloading: 120 kB Downloading: 130 kB Downloading: 130 kB Downloading: 130 kB Downloading: 130 kB Downloading: 140 kB Downloading: 140 kB Downloading: 150 kB Downloading: 150 kB Downloading: 150 kB Downloading: 150 kB Downloading: 150 kB Downloading: 150 kB Downloading: 160 kB Downloading: 160 kB Downloading: 170 kB Downloading: 170 kB Downloading: 170 kB Downloading: 170 kB Downloading: 180 kB Downloading: 180 kB Downloading: 190 kB Downloading: 190 kB Downloading: 190 kB Downloading: 190 kB Downloading: 190 kB Downloading: 190 kB Downloading: 200 kB Downloading: 200 kB Downloading: 210 kB Downloading: 210 kB Downloading: 210 kB Downloading: 210 kB Downloading: 220 kB Downloading: 220 kB Downloading: 230 kB Downloading: 230 kB Downloading: 230 kB Downloading: 230 kB Downloading: 240 kB Downloading: 240 kB Downloading: 240 kB Downloading: 240 kB Downloading: 250 kB Downloading: 250 kB Downloading: 250 kB Downloading: 250 kB Downloading: 260 kB Downloading: 260 kB Downloading: 260 kB Downloading: 260 kB Downloading: 270 kB Downloading: 270 kB Downloading: 270 kB Downloading: 270 kB Downloading: 270 kB Downloading: 270 kB Downloading: 280 kB Downloading: 280 kB Downloading: 290 kB Downloading: 290 kB Downloading: 300 kB Downloading: 300 kB Downloading: 300 kB Downloading: 300 kB Downloading: 300 kB Downloading: 300 kB Downloading: 310 kB Downloading: 310 kB Downloading: 310 kB Downloading: 310 kB Downloading: 330 kB Downloading: 330 kB Downloading: 330 kB Downloading: 330 kB Downloading: 340 kB Downloading: 340 kB Downloading: 350 kB Downloading: 350 kB Downloading: 360 kB Downloading: 360 kB Downloading: 370 kB Downloading: 370 kB Downloading: 370 kB Downloading: 370 kB Downloading: 380 kB Downloading: 380 kB Downloading: 390 kB Downloading: 390 kB Downloading: 390 kB Downloading: 390 kB Downloading: 400 kB Downloading: 400 kB Downloading: 400 kB Downloading: 400 kB Downloading: 410 kB Downloading: 410 kB Downloading: 410 kB Downloading: 410 kB Downloading: 420 kB Downloading: 420 kB Downloading: 430 kB Downloading: 430 kB Downloading: 440 kB Downloading: 440 kB Downloading: 440 kB Downloading: 440 kB Downloading: 450 kB Downloading: 450 kB Downloading: 460 kB Downloading: 460 kB Downloading: 460 kB Downloading: 460 kB Downloading: 460 kB Downloading: 460 kB Downloading: 470 kB Downloading: 470 kB Downloading: 480 kB Downloading: 480 kB Downloading: 480 kB Downloading: 480 kB Downloading: 490 kB Downloading: 490 kB Downloading: 500 kB Downloading: 500 kB Downloading: 500 kB Downloading: 500 kB Downloading: 510 kB Downloading: 510 kB Downloading: 520 kB Downloading: 520 kB Downloading: 520 kB Downloading: 520 kB Downloading: 530 kB Downloading: 530 kB Downloading: 530 kB Downloading: 530 kB Downloading: 540 kB Downloading: 540 kB Downloading: 540 kB Downloading: 540 kB Downloading: 550 kB Downloading: 550 kB Downloading: 560 kB Downloading: 560 kB Downloading: 560 kB Downloading: 560 kB Downloading: 560 kB Downloading: 560 kB Downloading: 560 kB Downloading: 560 kB Downloading: 570 kB Downloading: 570 kB Downloading: 600 kB Downloading: 600 kB Downloading: 610 kB Downloading: 610 kB Downloading: 620 kB Downloading: 620 kB Downloading: 620 kB Downloading: 620 kB Downloading: 630 kB Downloading: 630 kB Downloading: 630 kB Downloading: 630 kB Downloading: 640 kB Downloading: 640 kB Downloading: 640 kB Downloading: 640 kB Downloading: 650 kB Downloading: 650 kB Downloading: 650 kB Downloading: 650 kB Downloading: 660 kB Downloading: 660 kB Downloading: 670 kB Downloading: 670 kB Downloading: 680 kB Downloading: 680 kB Downloading: 680 kB Downloading: 680 kB Downloading: 680 kB Downloading: 680 kB Downloading: 690 kB Downloading: 690 kB Downloading: 700 kB Downloading: 700 kB Downloading: 700 kB Downloading: 700 kB Downloading: 700 kB Downloading: 700 kB Downloading: 710 kB Downloading: 710 kB Downloading: 710 kB Downloading: 710 kB Downloading: 720 kB Downloading: 720 kB Downloading: 730 kB Downloading: 730 kB Downloading: 730 kB Downloading: 730 kB Downloading: 730 kB Downloading: 730 kB Downloading: 740 kB Downloading: 740 kB Downloading: 740 kB Downloading: 740 kB Downloading: 740 kB Downloading: 740 kB Downloading: 750 kB Downloading: 750 kB Downloading: 750 kB Downloading: 750 kB Downloading: 750 kB Downloading: 750 kB Downloading: 760 kB Downloading: 760 kB Downloading: 760 kB Downloading: 760 kB Downloading: 760 kB Downloading: 760 kB Downloading: 770 kB Downloading: 770 kB Downloading: 780 kB Downloading: 780 kB Downloading: 780 kB Downloading: 780 kB Downloading: 790 kB Downloading: 790 kB Downloading: 790 kB Downloading: 790 kB Downloading: 800 kB Downloading: 800 kB Downloading: 800 kB Downloading: 800 kB Downloading: 810 kB Downloading: 810 kB Downloading: 810 kB Downloading: 810 kB Downloading: 820 kB Downloading: 820 kB Downloading: 820 kB Downloading: 820 kB Downloading: 830 kB Downloading: 830 kB Downloading: 830 kB Downloading: 830 kB Downloading: 830 kB Downloading: 830 kB Downloading: 840 kB Downloading: 840 kB Downloading: 850 kB Downloading: 850 kB Downloading: 850 kB Downloading: 850 kB Downloading: 860 kB Downloading: 860 kB Downloading: 870 kB Downloading: 870 kB Downloading: 870 kB Downloading: 870 kB Downloading: 880 kB Downloading: 880 kB Downloading: 880 kB Downloading: 880 kB Downloading: 890 kB Downloading: 890 kB Downloading: 900 kB Downloading: 900 kB Downloading: 900 kB Downloading: 900 kB Downloading: 900 kB Downloading: 900 kB Downloading: 900 kB Downloading: 900 kB Downloading: 910 kB Downloading: 910 kB Downloading: 920 kB Downloading: 920 kB Downloading: 920 kB Downloading: 920 kB Downloading: 920 kB Downloading: 920 kB Downloading: 920 kB Downloading: 920 kB Downloading: 920 kB Downloading: 920 kB Downloading: 930 kB Downloading: 930 kB Downloading: 940 kB Downloading: 940 kB Downloading: 950 kB Downloading: 950 kB Downloading: 960 kB Downloading: 960 kB Downloading: 970 kB Downloading: 970 kB Downloading: 970 kB Downloading: 970 kB Downloading: 970 kB Downloading: 970 kB Downloading: 980 kB Downloading: 980 kB Downloading: 980 kB Downloading: 980 kB Downloading: 990 kB Downloading: 990 kB Downloading: 990 kB Downloading: 990 kB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1 MB Downloading: 1.1 MB Downloading: 1.1 MB Downloading: 1.1 MB Downloading: 1.1 MB Downloading: 1.1 MB Downloading: 1.1 MB Downloading: 1.1 MB Downloading: 1.1 MB Downloading: 1.1 MB Downloading: 1.1 MB Downloading: 1.1 MB Downloading: 1.1 MB Downloading: 1.1 MB Downloading: 1.1 MB Downloading: 1.1 MB Downloading: 1.1 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.2 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.3 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.4 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.5 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.6 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.7 MB Downloading: 1.8 MB Downloading: 1.8 MB Downloading: 1.8 MB Downloading: 1.8 MB head(Census.sf) ## Simple feature collection with 6 features and 4 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 246871.5 ymin: 622738.2 xmax: 558086.8 ymax: 683032.1 ## Projected CRS: NAD83(2011) / Florida GDL Albers ## GEOID NAME variable estimate ## 1 12001001201 Census Tract 12.01, Alachua County, Florida B00002_001 112 ## 2 12001001519 Census Tract 15.19, Alachua County, Florida B00002_001 99 ## 3 12001001520 Census Tract 15.20, Alachua County, Florida B00002_001 85 ## 4 12001002207 Census Tract 22.07, Alachua County, Florida B00002_001 137 ## 5 12001002218 Census Tract 22.18, Alachua County, Florida B00002_001 111 ## 6 12005000805 Census Tract 8.05, Bay County, Florida B00002_001 159 ## geometry ## 1 MULTIPOLYGON (((555668.2 63... ## 2 MULTIPOLYGON (((556060 6244... ## 3 MULTIPOLYGON (((555506.9 62... ## 4 MULTIPOLYGON (((550891 6274... ## 5 MULTIPOLYGON (((552508.8 62... ## 6 MULTIPOLYGON (((246876.1 68... The column labeled estimate is the estimate of the number of housing units within the census tract Finally you use the sf::st_interpolate_aw() function to spatially interpolate the housing units to the tornado path awi.sf &lt;- sf::st_interpolate_aw(Census.sf[&quot;estimate&quot;], to = FL_TornPath.sf, extensive = TRUE) ## Warning in st_interpolate_aw.sf(Census.sf[&quot;estimate&quot;], to = FL_TornPath.sf, : ## st_interpolate_aw assumes attributes are constant or uniform over areas of x head(awi.sf) ## Simple feature collection with 6 features and 1 field ## Attribute-geometry relationship: 0 constant, 1 aggregate, 0 identity ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 269909.6 ymin: 653984.7 xmax: 312444.4 ymax: 754756.2 ## Projected CRS: NAD83(2011) / Florida GDL Albers ## estimate geometry ## 1 2.092023e-02 POLYGON ((286829.3 702418.3... ## 2 4.662568e-05 POLYGON ((312239.6 653993.8... ## 3 4.662568e-05 POLYGON ((312337.9 667314.6... ## 4 7.429276e-03 POLYGON ((305611.1 671806.4... ## 5 2.689190e-05 POLYGON ((312444.4 681744.6... ## 6 6.620421e-02 POLYGON ((272197.7 754754.5... range(awi.sf$estimate, na.rm = TRUE) ## [1] 0.0000 201.6803 The tornado that hit the most houses occurred just east of downtown Orlando awi.sf2 &lt;- awi.sf |&gt; dplyr::filter(estimate &gt; 175) tmap::tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tmap::tm_shape(awi.sf2) + tmap::tm_borders(col = &quot;red&quot;) S4 spatial data objects The {sp} package has methods for working with spatial data as S4 objects (reference classes). A few of the packages we will use this semester for analyzing/modeling spatial data work only with {sp} objects so it is helpful to see how they are structured Load the package (install if needed) if(!require(sp)) install.packages(pkgs = &quot;sp&quot;, repos = &quot;http://cran.us.r-project.org&quot;) ## Loading required package: sp library(sp) Spatial objects from the {sp} package fall into two types: spatial-only information (the geometry). Geometries include SpatialPoints, SpatialLines, SpatialPolygons, etc, and extensions to these types where attribute information is available and stored in a data frame. These include SpatialPointsDataFrame, SpatialLinesDataFrame, etc The typical situation nowadays is that you have a simple feature data frame (an S3 spatial object) and you need to convert it to an {sp} spatial data frame before the data can be analyzed or modeled Consider again the the tornado tracks that you import as a simple feature data frame. Here you filter on the attribute st keeping only tornadoes that originated in Florida FL_Torn.sf &lt;- sf::st_read(dsn = here::here(&quot;data&quot;, &quot;1950-2021-torn-aspath&quot;), layer = &quot;1950-2021-torn-aspath&quot;) |&gt; dplyr::filter(st == &quot;FL&quot;) ## Reading layer `1950-2021-torn-aspath&#39; from data source ## `/Users/jameselsner/Desktop/ClassNotes/ASS-2023/data/1950-2021-torn-aspath&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 67558 features and 22 fields ## Geometry type: LINESTRING ## Dimension: XY ## Bounding box: xmin: -163.53 ymin: 17.7212 xmax: -64.7151 ymax: 61.02 ## Geodetic CRS: WGS 84 class(FL_Torn.sf) ## [1] &quot;sf&quot; &quot;data.frame&quot; The object FL_Torn.sf is a simple feature data frame (S3 spatial data object). You convert the simple feature data frame to an S4 spatial data object using the sf::as_Spatial() function FL_Torn.sp &lt;- FL_Torn.sf |&gt; sf::as_Spatial() class(FL_Torn.sp) ## [1] &quot;SpatialLinesDataFrame&quot; ## attr(,&quot;package&quot;) ## [1] &quot;sp&quot; The file FL_Torn.sp is a spatial object of class SpatialLinesDataFrame Information in S4 spatial objects is stored in slots. Slot names are listed with the slotNames() function FL_Torn.sp |&gt; slotNames() ## [1] &quot;data&quot; &quot;lines&quot; &quot;bbox&quot; &quot;proj4string&quot; The data slot contains the data frame (attribute table), the lines slot contains the spatial geometries (in this case lines), the bbox slot is the boundary box and the proj4string slot is the CRS The object name followed by the @ symbol allows access to information in the slot. The @ symbol is similar to the $ symbol for regular data frames. For example to see the first three rows of the data frame type FL_Torn.sp@data[1:3, ] ## om yr mo dy date time tz st stf stn mag inj fat loss closs slat ## 1 29 1950 3 16 1950-03-16 09:15:00 3 FL 12 1 2 0 0 3 0 29.65 ## 2 105 1950 5 15 1950-05-15 11:00:00 3 FL 12 3 1 0 0 4 0 28.58 ## 3 106 1950 5 15 1950-05-15 11:00:00 3 FL 12 4 2 0 0 4 0 28.50 ## slon elat elon len wid fc ## 1 -81.22 29.6501 -81.2199 1.5 150 0 ## 2 -81.37 28.5801 -81.3699 0.1 10 0 ## 3 -81.37 28.5001 -81.3699 0.1 10 0 You recognize this as observations from the first three tornadoes in the data set. In fact, the object name together with the slot name data has class data.frame class(FL_Torn.sp@data) ## [1] &quot;data.frame&quot; When using the $ symbol on S4 spatial objects, you access the columns (attributes) as you would a data frame. For example, to list the EF rating (column labeled mag) of the first 3 tornadoes FL_Torn.sp$mag[1:3] ## [1] 2 1 2 Selecting, retrieving, or replacing attributes in S4 spatial data frames is done with methods in {base} R package. For example [] is used to select rows and/or columns. To select mag of the 7th tornado type FL_Torn.sp$mag[7] ## [1] 1 Other methods include: plot(), summary(),dim() and names() (operate on the data slot), as.data.frame(), as.matrix() and image() (for spatial data on a grid), and length() (number of cases) You can’t use the {dplyr} verbs on S4 data frames. To convert from an S4 spatial data frame to a simple feature data frame use sf::st_as_sf() The first spatial geometry is given as the first element of the lines list. FL_Torn.sp@lines[1] ## [[1]] ## An object of class &quot;Lines&quot; ## Slot &quot;Lines&quot;: ## [[1]] ## An object of class &quot;Line&quot; ## Slot &quot;coords&quot;: ## [,1] [,2] ## [1,] -81.2200 29.6500 ## [2,] -81.2199 29.6501 ## ## ## ## Slot &quot;ID&quot;: ## [1] &quot;1&quot; It is an object of class Lines. The line is identified by a matrix indicating the longitude and latitude of the start point in row one and the longitude and latitude of the end point in row two The bbox slot is an object of class matrix and array and the proj4string slot is of class CRS. The coordinate reference system is specified as a character string proj4string(FL_Torn.sp) ## [1] &quot;+proj=longlat +datum=WGS84 +no_defs&quot; The interface to the geometry engine-open source (GEOS) is through the {rgeos} package "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
