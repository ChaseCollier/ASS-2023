[["index.html", "GIS5122: Applied Spatial Statistics Fall 2022 ", " GIS5122: Applied Spatial Statistics Fall 2022 James B. Elsner Date compiled: 2022-05-10 tidycensus::get_acs(geography = “county,” variables = “B01003_001”) will get you the latest 2016-2020 ACS estimates https://walker-data.com/census-r/wrangling-census-data-with-tidyverse-tools.html "],["syllabus.html", "Syllabus GIS5122: Applied Spatial Statistics Contact information Course description Grades Ethics Outline of topics Reference materials Reproducible research Getting setup for this course The RStudio IDE Lab assignments Getting started with R", " Syllabus GIS5122: Applied Spatial Statistics Contact information Instructor Name: Professor James B. Elsner Instructor Location: Bellamy Building, Room 323a Lesson Hours: TR 3:05-4:20 p.m. Student Hours: TR 9-10 a.m., 2-3 p.m. Email: jelsner@fsu.edu Links to my stuff (if you are curious) Website GitHub Twitter Course description This course is for students who want to learn how to analyze, map, and model spatial and geographical data using the R programming language. It assumes students know some basic statistics through multiple linear regression. It also assumes students have some prior experience with using R. Students without knowledge of R should seek help through various online tutorials (see below). In this course we survey the methods used to describe, analyze, and model spatial data. Focus is on applications. Emphasis is given to how spatial statistical methods are related through the concept of spatial autocorrelation. Expected learning outcomes Learn how and when to apply statistical methods and models to spatial data, learn various packages in R for analyzing and modeling spatial data, and learn how to interpret the results of a spatial data model. Course materials Access to the internet and a computer. Lesson and assignment files are available through Canvas (and GitHub). There is no required textbook. Many excellent online resources are available. Here are some of my favorites. R for Data Science https://r4ds.had.co.nz/ https://dominicroye.github.io/en/2020/a-very-short-introduction-to-tidyverse/ https://tinystats.github.io/teacups-giraffes-and-statistics/index.html Class meetings Remote lessons Remote/F2F lab assignments During each lesson I will work through and explain the R code within an xx-Lesson.Rmd file on Zoom. The notes in the lesson files are comprehensive, so you can work through them on your own. The notes are written using the markdown language. Markdown is a way to write content for the Web. An R markdown file has the suffix .Rmd (R markdown file). The file is opened using the RStudio application. Grades You are responsible for: Reading and running the code in the lesson R markdown files (.Rmd) files. You can do this during the remote lessons as I talk and run my code or outside of class on your own. Completing and returning the lab assignments on time. Grades are determined only by how well you do on the assignments. Grading standard A: Outstanding: few, in any, errors/omissions B: Good: only minor errors/omissions C: Satisfactory: minor omissions, at least one major error/omission D: Poor: several major errors/omissions F: Fail: many major errors/omissions I’ll use the +/- grading system. Grades will be posted as they are recorded on FSU Canvas Ethics Academic honor code https://fda.fsu.edu/academic-resources/academic-integrity-and-grievances/academic-honor-policy Americans With Disabilities Act Students with disabilities needing academic accommodation should: (1) register with and provide documentation to the Student Disability Resource Center; (2) bring a letter indicating the need for accommodation and what type. This should be done during the first week of classes. Diversity and inclusiveness It is my intent to present notes and data that are respectful of diversity: gender identity, sexuality, disability, age, socioeconomic status, ethnicity, race, nationality, religion, and culture. Learning during a pandemic The pandemic has made it difficult for most of us. I am committed to making sure that you learn everything you were hoping to learn from this class. I will make whatever accommodations are needed to help you learn the material and finish your assignments. Under normal conditions I am quite flexible and lenient with grading with students facing difficult challenges. My generosity is amplified under these pandemic conditions. Outline of topics This is a guide for the course and is subject to change with advanced notice. Topics: Working with data and making graphs (~ 4 lessons) Working with spatial data and making maps (~ 5 lessons) Quantifying spatial autocorrelation and spatial regression (~ 5 lessons) Analyzing and modeling point pattern data (~ 6 lessons) Estimating variograms and spatial interpolation (~ 6 lessons) Other topics (~ 2 lessons) Calendars Remote Lessons: January 6 January 11, 13 January 20 January 25, 27 February 1, 3 February 8, 10 February 15, 17 February 22, 24 March 1, 3 March 8, 10 March 15, 17 March 22, 24 March 29, 31 April 5, 7 April 12, 14 Lab Assignments: January 8 (no assignment, get setup with the R &amp; RStudio) January 15 January 22 January 29 February 5 February 12 February 19 February 26 March 5 March 12 March 19 (no assignment) March 26 April 2 (no assignment) April 9 April 16 Reference materials Bivand, R. S., E. J. Pebesma, and V. G. Gomez-Rubio, 2013: Applied Spatial Data Analysis with R, 2nd Edition, Springer. A source for much of the material in the lesson notes. Lovelace, R. Nowosad, J. and Muenchow, J. Geocomputation with R. https://geocompr.robinlovelace.net/ A source for some of the material in the lesson notes. Healy, K., 2018: Data Visualization: A practical introduction, https://socviz.co/. This book teaches you how to really look at your data. A source for some of the early material in the lesson notes. Waller, L. A., and C. A. Gotway, 2004: Applied Spatial Statistics for Public Health Data, John Wiley &amp; Sons, Inc. (Available as an e-book in the FSU library). Good overall reference material for analyzing and modeling spatial data. Cheat Sheets: https://rstudio.com/resources/cheatsheets/ R Cookbook: How to do specific things: https://rc2e.com/ R for Geospatial Processing: https://bakaniko.github.io/FOSS4G2019_Geoprocessing_with_R_workshop/ Spatial Data Science: https://keen-swartz-3146c4.netlify.com/ Maps/graphs: Inset maps: https://geocompr.github.io/post/2019/ggplot2-inset-maps/ {cartography} package in R: https://riatelab.github.io/cartography/docs/articles/cartography.html geovisualization with {mapdeck}: https://spatial.blog.ryerson.ca/2019/11/21/geovis-mapdeck-package-in-r/ 3D elevation with {rayshader}: https://www.rayshader.com/ 3D elevation to 3D printer: https://blog.hoxo-m.com/entry/2019/12/19/080000 Accelerate your plots with {ggforce}: https://rviews.rstudio.com/2019/09/19/intro-to-ggforce/ Summary statistics and ggplot: https://ggplot2tutor.com/summary_statistics/summary_statistics/ Space-time statistics: Space-time Bayesian modeling package: https://cran.r-project.org/web/packages/spTimer/spTimer.pdf Working with space-time rasters: https://github.com/surfcao/geog5330/blob/master/week12/raster.Rmd Bayesian models: Bayesian Linear Mixed Models: Random intercepts, slopes and missing data: https://willhipson.netlify.com/post/bayesian_mlm/bayesian_mlm/ Doing Bayesian Data Analysis in {brms} and the {tidyverse}: https://bookdown.org/ajkurz/DBDA_recoded/ Spatial models with INLA: https://becarioprecario.bitbucket.io/inla-gitbook/index.html Geospatial Health Data: Modeling and Visualization with {RINLA} and {shiny}: https://paula-moraga.github.io/book-geospatial/ Bayesian workflow: https://betanalpha.github.io/assets/case_studies/principled_bayesian_workflow.html#1_questioning_authority Spatial data: Progress in the R ecosystem for representing and handling spatial data https://link.springer.com/article/10.1007/s10109-020-00336-0 Google earthengine: https://earthengine.google.com/ Burden of roof: Revisiting housing costs with {tidycensus}: https://austinwehrwein.com/data-visualization/housing/ The Care and Feeding of Spatial Data: https://docs.google.com/presentation/d/1BHlrSZWmw9tRWfYFVsRLNhAoX6KzhOhsnezTqL-R0sU/edit#slide=id.g6aeb55b281_0_550 Accessing remotely sensed imagery: https://twitter.com/mouthofmorrison/status/1212840820019208192/photo/1 Spatial data sets from Brazil: https://github.com/ipeaGIT/geobr Machine learning: Supervised machine learning case studies: https://supervised-ml-course.netlify.com/ Machine learning for spatial prediction: https://www.youtube.com/watch?v=2pdRk4cj1P0&amp;feature=youtu.be Spatial networks: Spatial Networks in R with {sf} and {tidygraph}: https://www.r-spatial.org/r/2019/09/26/spatial-networks.html Travel times/distances: https://github.com/rCarto/osrm Transport planning/routing: https://docs.ropensci.org/stplanr/index.html https://www.urbandemographics.org/post/r5r-fast-multimodal-transport-routing-in-r/ Time series forecasting: https://weecology.github.io/MATSS/ Movement: https://besjournals.onlinelibrary.wiley.com/doi/pdf/10.1111/1365-2656.13116 Bookdown: Introduction: https://bookdown.org/yihui/bookdown/introduction.html Learning more: https://ropensci.org/blog/2020/04/07/bookdown-learnings/ Climate datasets: https://cran.r-project.org/web/packages/climate/vignettes/getstarted.html https://www.ncdc.noaa.gov/teleconnections/enso/indicators/soi/data.csv USGS water data: https://waterdata.usgs.gov/blog/dataretrieval/ Reference books Anselin, L., 2005: Spatial Regression Analysis in R, Spatial Analysis Laboratory, Center for Spatially Integrated Social Science. Baddeley, A., and R. Turner, 2005: spatstat: An R Package for Analyzing Spatial Point Patterns, Journal of Statistical Software, v12. Blangiardo, M., and M. Cameletti, 2015: Spatial and Spatio-temporal Bayesian Models with R-INLA, John Wiley &amp; Sons, Inc., New York. An introduction to Bayesian models for spatial data. Cressie, N. A. C., 1993: Statistics for Spatial Data, Wiley Series in Probability and Mathematical Statistics, John Wiley &amp; Sons, Inc., New York. A mathematical treatment of spatial data analysis. Cressie, N. A. C., and C. K. Wikle, 2011: Statistics for Spatio-Temporal Data, Wiley Series in Probability and Mathematical Statistics, John Wiley &amp; Sons, Inc., New York. A mathematical treatment of space-time statistics with an emphasis on Bayesian models. Diggle, P. J., 2003: Statistical Analysis of Spatial Point Patterns, Second Edition, Arnold Publishers. An introduction to the concepts and methods of statistical analysis of spatial point patterns. Fotherhingham, A. S., C. Brunsdon, and M. Charlton, 2000: Quantitative Geography: Perspectives on Spatial Data Analysis, SAGE Publications, London. A survey of spatial data analysis from the perspective of modern geography. Haining, R., 2003: Spatial Data Analysis: Theory and Practice, Cambridge University Press. A confluence of geographic information science and applied spatial statistics. Illian, J., A. Penttinen, H. Stoyan, and D. Stoyan, 2008: Statistical Analysis and Modeling of Spatial Point Patterns, Wiley Series in Statistics in Practice, John Wiley &amp; Sons, Inc., New York. A mathematical treatment of spatial point processes. Ripley, B. D., 1981: Spatial Statistics, Wiley, New York. A reference book on spatial data analysis with emphasis on point pattern analysis. Wickham, H., 2009: ggplot2: Elegant Graphics for Data Analysis, Springer UseR! Series, Springer, New York. An introduction to the ggplot package for graphics. Recent research examples More hots Stronger tornadoes Reproducible research A scientific paper has at least two goals: announce a new result and convince readers that the result is correct. Scientific papers should describe the results and provide a clear protocol to allow repetition and extension. Analysis and modeling tools should integrate text with code to make it easier to provide a clear protocol of what was done. Such tools make doing research efficient. Changes are made with little effort. Such tools allow others to build on what you’ve done. Research achieves more faster. Collaboration is easier. Code sharing leads to greater research impact. Research impact leads to promotion &amp; tenure. Free and open source software for geospatial data has progressed at an astonishing rate. High performance spatial libraries are now widely available. However, much of it is still not easy to script. Open source Geographic Information Systems (GIS) such as QGIS (see https://qgis.org) have greatly reduced the ‘barrier to entry’ but emphasis on the graphical user interface (GUI) makes reproducible research difficult. Instead this course focuses on a command line interface (CLI), enabling reproducible, and ‘computational’ work flows. You might be interested in this article: Practical reproducibility in geography and geosciences Getting setup for this course First get R Go to http://www.r-project.org. Select the CRAN (Comprehensive R Archive Network). Scroll to a mirror site. Choose the appropriate file for your hardware. Follow the instructions to install R. Then get RStudio Go to on http://rstudio.org Download RStudio Desktop Install and open RStudio Finally (Optional), learn git https://happygitwithr.com/install-git.html The RStudio IDE Written in HTML Top menus File &gt; New File &gt; R Markdown Tools &gt; Global Options &gt; Appearance Upper left panel is the markdown file. This is where we put our text and code. Run code chunks from this panel Output from the operations can be placed in this panel or in the Console (see the gear icon above) All the text, code, and output can be rendered to an HTML file or a PDF or Word document (see the Knit button above) Upper right panel shows what is in your current environment and the history of the commands you issued. This is also where you can connect to github Lower left panel is the Console I think of this as a sandbox where you try out small bits of code. If it works and is relevant move it to the markdown file. This is also where output from running code will be placed. Not a place for plain text Lower right panel shows your project files, the plots that get made, and all the packages associated with the project. The File tab shows the files in the project. The most important one is the .Rmd. The Plot tab currently shows a blank sheet The Packages tab shows all the packages that have been downloaded from CRAN and are associated with this project. Lab assignments You will do your assignments inside an Rmd file. Download the assignment Rmd file from Canvas and rename it to yourLastName_yourFirstName.Rmd Open the Rmd file with RStudio Replace ‘Your Name’ with your name in the preamble (YAML) Answer the questions by typing appropriate code between the code-chunk delimiters Select the Knit button to generate an HTML file Fix any errors Email your completed assignment Rmd file to jelsner@fsu.edu Getting started with R The {swirl} package contains functions to help you learn the basics of R. To install the package use the install.packages() function with the name of the package in quotes. The function downloads the package from the Comprehensive R Archive Network (CRAN). You update packages using update.packages() function. To make the functions work in your current session use the library() function with the name of the package (without quotes). This needs to be done for every session, but only once per session. install.packages(&quot;swirl&quot;) library(swirl) Type: swirl() Choose the lesson: R Programming. Work through lessons 1:8 Getting help: https://www.r-project.org/help.html "],["tuesday-august-23-2022.html", "Tuesday, August 23, 2022", " Tuesday, August 23, 2022 “Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” — Martin Fowler In this lesson I tell you what this course is about. In do so I give you a bit of history on my journey into data science. I give details about lessons, assignments, and grading, and about how to get the most out of this course. At the end I will talk a bit about why I present the course in this way. Is Milwaukee snowier than Madison? Is global warming making hurricanes stronger? Are tornadoes more likely to form over smooth terrain? Applied statistics is the analysis and modeling of data. Use the c() function to input small bits of data into R. The function combines (concatenates) items in a list together. For example, consider a set of hypothetical annual land falling hurricane counts over a ten-year period. 2 3 0 3 1 0 0 1 2 1 We get save these counts in our working directory by typing them into the console as follows. The console is the lower left window. counts &lt;- c(2, 3, 0, 3, 1, 0, 0, 1, 2, 1) counts ## [1] 2 3 0 3 1 0 0 1 2 1 We assign the values to an object called counts. The assignment operator is an equal sign (&lt;- or =). Values do not print. They are assigned to an object name. They are printed by typing the object name as we did on the second line. When printed the values are prefaced with a [1]. This indicates that the object is a vector and the first entry in the vector has a value of 2 (The number immediately to the right of [1]). We use the arrow keys to retrieve previous commands. Each command is stored in the history file. The up-arrow key moves backwards through the history file. The left and right arrow keys move the cursor along the line. We apply functions to data stored in objects. sum(counts) ## [1] 13 length(counts) ## [1] 10 sum(counts)/length(counts) ## [1] 1.3 mean(counts) ## [1] 1.3 The function sum() totals the number of hurricanes over all years, length() gives the number of elements in the vector. Other functions include, sort(), min(), max(), range(), diff(), and cumsum(). Try these functions on the landfall counts. What does range() function do? What does diff() do? The hurricane count data stored in the object counts is a vector. This means that R keeps track of the order that the data were entered. There is a first element, a second element, and so on. This is good for several reasons. The vector of counts has a natural order; year 1, year 2, etc. We don’t want to mix these. We would like to be able to make changes to the data item by item instead of entering the values again. Also, vectors are math objects so that math operations can be performed on them. For example, suppose counts contain the annual landfall count from the first decade of a longer record. We want to keep track of counts over other decades. This could be done by the following, example. d1 &lt;- counts d2 &lt;- c(0, 5, 4, 2, 3, 0, 3, 3, 2, 1) Most functions operate on each element of the data vector at the same time. d1 + d2 ## [1] 2 8 4 5 4 0 3 4 4 2 The first year of the first decade is added from the first year of the second decade and so on. What happens if we apply the c() function to these two vectors? Try it. c(d1, d2) ## [1] 2 3 0 3 1 0 0 1 2 1 0 5 4 2 3 0 3 3 2 1 If we are interested in each year’s count as a difference from the decade mean, we type: d1 - mean(d1) ## [1] 0.7 1.7 -1.3 1.7 -0.3 -1.3 -1.3 -0.3 0.7 -0.3 In this case a single number (the mean of the first decade) is subtracted from a vector. The result is from subtracting the number from each entry in the data vector. This is an example of data recycling. R repeats values from one vector so that the vector lengths match. Here the mean is repeated 10 times. "],["thursday-august-25-2022.html", "Thursday, August 25, 2022 Main take aways from the Syllabus Data science workflow with R markdown Working with data using functions from the {base} R packages Data frames", " Thursday, August 25, 2022 “The trouble with programmers is that you can never tell what a programmer is doing until it’s too late.” — Seymour Cray Main take aways from the Syllabus Lesson Hours: Mon/Wed 9:05 a.m. - 9:55 a.m., Lab Hours: Fri 9:05 a.m. - 9:55 a.m., Student Hours: Mon/Wed 9:55 a.m. - 10:30 a.m. The best way to contact me is through email: jelsner@fsu.edu. This course is a survey of methods to describe, analyze, and model spatial data using R. Focus is on applications. I emphasize how spatial statistical methods are related through the concept of spatial autocorrelation. Lessons are presented (and recorded) on Zoom Mondays and Wednesdays. Lab assignments are done on Zoom (no recording) on Fridays without much direct supervision. During each lesson I will work through and explain the R code within an xx-Lesson.Rmd file. The notes in the files are comprehensive, so you can work through them on your own. The notes are written using the markdown language (I will explain this a bit today). Think of this as a master class in spatial data science using R. Grades are determined by how well you do on the weekly assignments. There are many online sites dedicated to all aspects of the R programming language. A list of some of the ones related to spatial analysis and modeling are in Lesson 1. You should now be set up with R and RStudio. If not, please stay after class today and I will help you. I will spend the first several lessons teaching you how I work with R. For some of you this might be mostly a review. If this is entirely new don’t get discouraged. Most of what we will do does not involve complex R syntax. In this lesson I provide a review (or an introduction) to working with data using functions from the {base} R packages. The {base} R packages are part of the initial installation of R. They form the scaffolding for working in R, but much of what we will do in this class will involve functions from other packages. The one exception today is that I will introduce functions from the {readr} package (as part of the {tidyverse} set of packages) that simplify importing data into R. These functions are very similar to the corresponding functions in {base} R. Data science workflow with R markdown A scientific paper is advertisement for a claim. But the proof is the procedure that was used to obtain the result. The code is the exact procedure. Code is the recipe for what we did. It is the most efficient way to communicate precisely what was done. Communication to others and to our future self. When we use a spreadsheet, it’s hard to explain to someone precisely what we did. Click here, then right click here, then choose menu X, etc. The words we use to describe these procedures are not standard. If you’ve ever made a map using GIS you know how hard it is to make another (even similar one) with a new set of data. Running code with new data is simple. Code is an efficient way to communicate because all important information is given as plain text without ambiguity. Being able to code is a key skill for most technical jobs. The person most likely to reproduce our work a few months later is us. This is especially true for graphs and figures. These often have a finished quality to them as a result of tweaking and adjustments to the details. This makes it hard to reproduce later. The goal is to do as much of this tweaking as possible with the code we write, rather than in a way that is invisible (retrospectively). Contrast editing an image in Adobe Illustrator. In data science we toggle between: Writing code: Code to get our data into R, code to look at tables and summary statistics, code to make graphs, code to compute spatial statistics, code to model and plot our results. Looking at output: Our code is a set of instructions that produces the output we want: a table, a model, or a figure. It is helpful to be able to see that output. Taking notes: We also write text about what we are doing, why we are doing it, and what our results mean. To do be efficient we write our code and our comments together in the same file. This is where R markdown comes in (files that end with .Rmd). An R markdown file is a plain text document where text (such as notes or discussion) is interspersed with pieces, or chunks, of R code. When we Knit this file the code is executed (from the top to the bottom of the file) and the results supplement or replace the code with output. The resulting file is converted into a HTML, PDF, or Word document. The text in the markdown file they has simple format instructions. For example, the following symbols are used for emphasis italics, bold, and code font. When we create a new markdown document in R Studio, it contains a sample example. Lesson notes for this class are written in text using markdown formatting as needed. Text is interspersed with code. The format for code chunks is # lines of code here Three back-ticks (on a U.S. keyboard, the character under the escape key) followed by a pair of curly braces containing the name of the language we are using. The back-ticks-and-braces part signal that code is about to begin. We write our code as needed, and then end the chunk with a new line containing three more back-ticks. We can use the Insert button above to save time. In the markdown file, the lines between the first and second set of back ticks is grayed and a few small icons are noted in the upper-right corner of the grayed area. The green triangle is used to execute the code and either post the results in the console below or in the line below. When we keep our notes in this way, we are able to see everything together, the code, the output it produces, and our commentary or clarification on it. Also we can turn it into a good-looking document with one click. This is how we will do everything in this course. For example, select the Knit button above. Finally, note the Outline button in the upper right corner of the markdown file. We can organize and navigate through the markdown file section by section based on the pound symbol (#). Working with data using functions from the {base} R packages Applied spatial statistics is the analysis and modeling of spatial data. To begin our journey we need to know somethings about data objects in R. Perhaps the most important function is also one of the simplest. The c() function creates a ‘vector’ data object (vector object). The function combines (concatenates) individual data values, where each data value is separated by a comma, into a vector object with a length equal to the number of data values. Consider a set of hypothetical annual land falling hurricane counts over a ten-year period. In the first year there were two, the next year there were three, and so on. 2 3 0 3 1 0 0 1 2 1 We save these ten values to our working environment by assigning them to an object that we call counts. The assignment operator is an equal sign (&lt;- or =). counts &lt;- c(2, 3, 0, 3, 1, 0, 0, 1, 2, 1) By clicking on the Environment tab in the upper-right panel we see that the object counts with numerical values (num) 2 3, etc below word Values. We see that the elements are indexed between 1 and 10 (1:10). We print the values to the console by typing the name of the data object. counts ## [1] 2 3 0 3 1 0 0 1 2 1 When printed to the console, the values are prefaced with a [1]. This indicates that the object is a vector and the first element in the vector has a value of 2 (The number immediately to the right of [1]). Note: We can assign and print by wrapping the entire line of code in parentheses. ( counts &lt;- c(2, 3, 0, 3, 1, 0, 0, 1, 2, 1) ) ## [1] 2 3 0 3 1 0 0 1 2 1 We can use the arrow keys on our keyboard to retrieve previous commands. Each command is stored in the history file (click on the History tab in the upper-right panel). The up-arrow key moves backwards through the history file. The left and right arrow keys move the cursor along the line. We then apply functions to the vector data object. A function has a name and parentheses. Inside the parentheses are the function arguments. Many functions have only a single argument like a data vector. Examples include: sum(counts) ## [1] 13 length(counts) ## [1] 10 sum(counts)/length(counts) ## [1] 1.3 mean(counts) ## [1] 1.3 The function sum() totals the hurricane counts over all years, length() returns the number of elements in the vector. Other functions include sort(), min(), max(), range(), diff(), and cumsum(). The object counts that we created is a vector containing the hurricane data. This means that the elements are ordered. There is a first element, a second element, and so on. This is good for data objects for several reasons. The hurricane counts have a chronological order: year 1, year 2, etc and we want that ordered reflected in our data object. Also, we would like to be able to make changes to the data values by element. Finally, vectors are mathematical objects so that math operations can be performed on them in a natural way. For example, math tells us that a scalar multiplied by a vector is a vector where each element of the product has been multiplied by the scalar. The asterisk * is used for multiplication. 10 * counts ## [1] 20 30 0 30 10 0 0 10 20 10 Further, suppose counts contain the annual landfall count from the first decade of a longer record. We want to keep track of counts over other decades. This could be done by the following, example. d1 &lt;- counts d2 &lt;- c(0, 5, 4, 2, 3, 0, 3, 3, 2, 1) Most functions operate on each element of the data vector all at once. d1 + d2 ## [1] 2 8 4 5 4 0 3 4 4 2 The first year of the first decade is added to the first year of the second decade and so on. What happens if we apply the c() function to these two vectors? c(d1, d2) ## [1] 2 3 0 3 1 0 0 1 2 1 0 5 4 2 3 0 3 3 2 1 That’s correct. We get a vector with elements from both d1 and d2 in the order of first the first decade counts and then the second decade counts. If we are interested in each year’s count as a difference from the decade average, we type d1 - mean(d1) ## [1] 0.7 1.7 -1.3 1.7 -0.3 -1.3 -1.3 -0.3 0.7 -0.3 In this case a single number (the mean of the first decade) is subtracted from a vector. The result is from subtracting the number from each entry in the data vector. Suppose we are interested in the variance of the set of landfall counts. The variance is computed as \\[ \\hbox{var}(x) = \\frac{(x_1 - \\bar x)^2 + (x_2 - \\bar x)^2 + \\cdots + (x_n - \\bar x)^2}{n-1} = \\frac{1}{n-1}\\sum_{i=1}^n (x_i - \\bar x)^2 \\] Although the var() function computes this, here we see how to do this using simpler functions. The key is to find the squared differences and then sum. x &lt;- d1 xbar &lt;- mean(x) x - xbar ## [1] 0.7 1.7 -1.3 1.7 -0.3 -1.3 -1.3 -0.3 0.7 -0.3 (x - xbar)^2 ## [1] 0.49 2.89 1.69 2.89 0.09 1.69 1.69 0.09 0.49 0.09 sum((x - xbar)^2) ## [1] 12.1 n &lt;- length(x) n ## [1] 10 sum((x - xbar)^2)/(n - 1) ## [1] 1.344444 var(x) ## [1] 1.344444 Elements in a vector object must all have the same type. This type can be numeric, as in counts, character strings, as in simpsons &lt;- c(&#39;Homer&#39;, &#39;Marge&#39;, &#39;Bart&#39;, &#39;Lisa&#39;, &#39;Maggie&#39;) simpsons ## [1] &quot;Homer&quot; &quot;Marge&quot; &quot;Bart&quot; &quot;Lisa&quot; &quot;Maggie&quot; Character strings are made with matching quotes, either double, \", or single, '. If we mix types the values will be coerced into a common type, which is usually a character string. Arithmetic operations do not work on character strings. Returning to the land falling hurricane counts. Now suppose the National Hurricane Center (NHC) reanalyzes a storm, and that the 6th year of the 2nd decade is a 1 rather than a 0 for the number of landfalls. In this case we type: d2[6] &lt;- 1 This assigns to the 6th year of the decade a value of one. The assignment to the 6th entry in the vector d2 is done by referencing the entry with square brackets []. It is important to keep this straight: Parentheses () are used for functions and square brackets [] are used to extract values from vectors (and data frames, arrays, lists, etc). d2 ## [1] 0 5 4 2 3 1 3 3 2 1 d2[2] ## [1] 5 d2[-4] ## [1] 0 5 4 3 1 3 3 2 1 d2[c(1, 3, 5, 7, 9)] ## [1] 0 4 3 3 2 The first line prints all the elements of the vector df2. The second prints only the 2nd value of the vector. The third prints all but the 4th value. The fourth prints the values with odd element numbers. To create structured data, for example the integers 1 through 99 we use the : operator. 1:99 rev(1:99) 99:1 The seq() function is more general. We specify the sequence interval with the by = or length = arguments. seq(from = 1, to = 9, by = 2) ## [1] 1 3 5 7 9 seq(from = 1, to = 10, by = 2) ## [1] 1 3 5 7 9 seq(from = 1, to = 9, length = 5) ## [1] 1 3 5 7 9 The rep() function is to create repetitive sequences. The first argument is a value or vector that we want repeated and the second argument is the number of times we want it repeated. rep(1, times = 10) ## [1] 1 1 1 1 1 1 1 1 1 1 rep(simpsons, times = 2) ## [1] &quot;Homer&quot; &quot;Marge&quot; &quot;Bart&quot; &quot;Lisa&quot; &quot;Maggie&quot; &quot;Homer&quot; &quot;Marge&quot; &quot;Bart&quot; ## [9] &quot;Lisa&quot; &quot;Maggie&quot; In the second example the vector simpsons containing the Simpson characters is repeated twice. To repeat each element of the vector use the each = argument. rep(simpsons, each = 2) ## [1] &quot;Homer&quot; &quot;Homer&quot; &quot;Marge&quot; &quot;Marge&quot; &quot;Bart&quot; &quot;Bart&quot; &quot;Lisa&quot; &quot;Lisa&quot; ## [9] &quot;Maggie&quot; &quot;Maggie&quot; More complicated patterns can be repeated by specifying pairs of equal length vectors. In this case, each element of the first vector is repeated the corresponding number of times specified by the element in the second vector. rep(c(&quot;long&quot;, &quot;short&quot;), times = c(2, 3)) ## [1] &quot;long&quot; &quot;long&quot; &quot;short&quot; &quot;short&quot; &quot;short&quot; To find the maximum number of landfalls in the first decade we type. max(d1) ## [1] 3 What years had the maximum? d1 == 3 ## [1] FALSE TRUE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE Notice the double equals signs (==). This is a logical operator that tests each value in d1 to see if it is equal to 3. The 2nd and 4th values are equal to 3 so TRUEs are returned. Think of this as asking R a question. Is the value equal to 3? R answers all at once with a vector of TRUE’s and FALSE’s. What years had fewer than 2 hurricanes? d1 &lt; 2 ## [1] FALSE FALSE TRUE FALSE TRUE TRUE TRUE TRUE FALSE TRUE Now the question is how do we get the vector element corresponding to the TRUE values? That is, which years have 3 landfalls? which(d1 == 3) ## [1] 2 4 The function which.max() can be used to get the first maximum. which.max(d1) ## [1] 2 We might also want to know the total number of landfalls in each decade and the number of years in a decade without a landfall. Or how about the ratio of the mean number of landfalls over the two decades. sum(d1) ## [1] 13 sum(d2) ## [1] 24 sum(d1 == 0) ## [1] 3 sum(d2 == 0) ## [1] 1 mean(d2)/mean(d1) ## [1] 1.846154 So there are 85% more landfalls during the second decade. Is this difference statistically significant? To remove an object from the environment use the rm() function. rm(d1, d2) Data frames The data frame is the most important data object in this course. A data frame stores data in a tabular format like a spreadsheet. It is a list of vectors each with the same length. It has column names (and sometimes row names). For example, we create a data frame object df containing three vectors n, s, b each with three elements using the data.frame() function. n &lt;- c(2, 3, 5) s &lt;- c(&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;) b &lt;- c(TRUE, FALSE, TRUE) df &lt;- data.frame(n, s, b) To see that the object is a data frame we use the class() function with the name of the object inside the parentheses. class(df) ## [1] &quot;data.frame&quot; The object df is of class data.frame. Note that the object name shows up in our Environment under Data and it includes a little blue arrow indicating that we can view it by clicking on the row. The data frame shows up as a table (like a spreadsheet) in the View() mode (see the command in the console below). Caution: This is not advised for large data frames. The top line of the table is called the header. Each line below the header contains a row of data, which begins with the name (or number) of the row followed by the data values. Each data element is in a cell. To retrieve a data value from a cell, we enter its row and column coordinates in that order in the single square bracket [] operator and separated by a column. Here is the cell value from the first row, second column of df. df[1, 2] ## [1] &quot;aa&quot; We can print the column names (located in the top row in the View() mode) with the names() function. names(df) ## [1] &quot;n&quot; &quot;s&quot; &quot;b&quot; The list of names is a vector of length three containing the elements “n,” “s,” and “b” in that order. We access individual columns of a data frame as vectors by appending the dollar sign ($) to the object name. For example, to print the values of the column labeled s we type df$s ## [1] &quot;aa&quot; &quot;bb&quot; &quot;cc&quot; Base R and many of the packages we will use this semester include example data frames. The data frame called mtcars, for instance, contains information extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models). class(mtcars) ## [1] &quot;data.frame&quot; names(mtcars) ## [1] &quot;mpg&quot; &quot;cyl&quot; &quot;disp&quot; &quot;hp&quot; &quot;drat&quot; &quot;wt&quot; &quot;qsec&quot; &quot;vs&quot; &quot;am&quot; &quot;gear&quot; ## [11] &quot;carb&quot; The number of data rows and data columns in the data frame are printed using the nrow() and ncol() functions. nrow(mtcars) ## [1] 32 ncol(mtcars) ## [1] 11 Further details of built-in data frames like mtcars is available in the R documentation accessed with the help() (or ?) function. help(mtcars) If we type the name of the data frame in the console (this is not advisable!) all the data are printed. mtcars ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 Instead, to get a glimpse of our data we used the functions head(), which prints the first six rows, or str(), which lists all the columns by data type. head(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 str(mtcars) ## &#39;data.frame&#39;: 32 obs. of 11 variables: ## $ mpg : num 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... ## $ cyl : num 6 6 4 6 8 6 8 4 4 6 ... ## $ disp: num 160 160 108 258 360 ... ## $ hp : num 110 110 93 110 175 105 245 62 95 123 ... ## $ drat: num 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... ## $ wt : num 2.62 2.88 2.32 3.21 3.44 ... ## $ qsec: num 16.5 17 18.6 19.4 17 ... ## $ vs : num 0 0 1 1 0 1 0 1 1 1 ... ## $ am : num 1 1 1 0 0 0 0 0 0 0 ... ## $ gear: num 4 4 4 3 3 3 3 4 4 4 ... ## $ carb: num 4 4 1 1 2 1 4 2 2 4 ... "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
