[["tuesday-november-8-2022-1.html", "Tuesday November 8, 2022", " Tuesday November 8, 2022 Today Lab 3 Import the Florida wildfire data as a simple feature data frame called FL_Fires.sf and transform the native CRS to a Florida GDL Albers (EPSG 3086) using the following code chunk. if(!&quot;FL_Fires&quot; %in% list.files(here::here(&quot;data&quot;))){ download.file(&quot;http://myweb.fsu.edu/jelsner/temp/data/FL_Fires.zip&quot;, here::here(&quot;data&quot;,&quot;FL_Fires.zip&quot;)) unzip(here::here(&quot;data&quot;, &quot;FL_Fires.zip&quot;), exdir = here::here(&quot;data&quot;)) } FL_Fires.sf &lt;- sf::st_read(dsn = here::here(&quot;data&quot;, &quot;FL_Fires&quot;)) |&gt; sf::st_transform(crs = 3086) ## Reading layer `FL_Fires&#39; from data source ## `/Users/jelsner/Desktop/ClassNotes/ASS-2022/data/FL_Fires&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 90261 features and 37 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: -9750382 ymin: 2824449 xmax: -8908899 ymax: 3632749 ## Projected CRS: Mercator_2SP dim(FL_Fires.sf) ## [1] 90261 38 Use the us_counties() function from the {USAboundaries} package to get county boundaries in Florida as a simple feature data frame called Bay.sf. Filter on name to keep only Bay County. Transform the geometry using EPSG 3086. (5) Bay.sf &lt;- USAboundaries::us_counties(states = &quot;FL&quot;) |&gt; dplyr::select(name) |&gt; dplyr::filter(name == &quot;Bay&quot;) |&gt; sf::st_transform(crs = 3086) Use the function st_intersection() to create a new simple feature data frame called BayFires.sf from the FL_Fires.sf simple feature data frame that contains only the lightning caused wildfires inside the Bay County polygon. (10) BayFires.sf &lt;- FL_Fires.sf |&gt; sf::st_intersection(Bay.sf) |&gt; dplyr::filter(STAT_CAU_1 == &quot;Lightning&quot;) ## Warning: attribute variables are assumed to be spatially constant throughout all ## geometries Create a ppp object of the lightning caused wildfire locations in Bay County as unmarked events. Create an owin object of the county polygon (see Assignment 17). (10) library(spatstat) ## Loading required package: spatstat.data ## Loading required package: spatstat.geom ## spatstat.geom 2.4-0 ## Loading required package: spatstat.random ## spatstat.random 2.2-0 ## Loading required package: spatstat.core ## Loading required package: nlme ## Loading required package: rpart ## spatstat.core 2.4-4 ## Loading required package: spatstat.linnet ## spatstat.linnet 2.3-2 ## ## spatstat 2.3-4 (nickname: &#39;Watch this space&#39;) ## For an introduction to spatstat, type &#39;beginner&#39; BF.ppp &lt;- BayFires.sf$geometry |&gt; as.ppp() W &lt;- Bay.sf |&gt; as.owin() ( BF.ppp &lt;- BF.ppp[W] ) ## Planar point pattern: 276 points ## window: polygonal boundary ## enclosing rectangle: [208178.4, 267362.83] x [658205.4, 729733.7] units Plot a map displaying the local intensity. (5) BF.ppp |&gt; density() |&gt; plot() plot(BF.ppp, pch = &#39;.&#39;, add = TRUE) Compute the nearest neighbor function (G) using the Gest() function without correction for borders (see Lesson 18). Make a plot of the estimated values for this function and include the theoretical curve under the null hypothesis of complete spatial randomness. From the plot eyeball an estimate of the percentage of lightning caused wildfires there were within 500 meters of another wildfire. (15) BF.ppp |&gt; Gest(correction = &quot;km&quot;) |&gt; plot() abline(v = 500, col = &quot;black&quot;, lty = 2) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
